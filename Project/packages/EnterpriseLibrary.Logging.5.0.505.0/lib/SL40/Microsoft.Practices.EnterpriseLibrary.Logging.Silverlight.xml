<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Practices.EnterpriseLibrary.Logging.Silverlight</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.AsyncTracingErrorReporter">
            <summary>
            Used to report logging errors which have occurred during asynchronous logging operations.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.IAsyncTracingErrorReporter">
            <summary>
            Used to report logging errors which have occurred during asynchronous logging operations.
            </summary>
            <remarks>
            Trace listeners which perform asynchronous operations must receive a reference to this interface and report 
            errors in asynchronous operations to it.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.IAsyncTracingErrorReporter.ReportExceptionDuringTracing(System.Exception,Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry,System.String)">
            <summary>
            Reports an exception during asynchronous tracing.
            </summary>
            <param name="exception">The exception.</param>
            <param name="log">The log entry that was being logged when the exception occurred.</param>
            <param name="traceSourceName">The name of the trace source for which the entry was being logged.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.IAsyncTracingErrorReporter.ReportErrorDuringTracing(System.String)">
            <summary>
            Reports an error during asynchronous tracing.
            </summary>
            <param name="message">The error message to trace.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.AsyncTracingErrorReporter.ReportExceptionDuringTracing(System.Exception,Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry,System.String)">
            <summary>
            Reports an exception during asynchronous tracing.
            </summary>
            <param name="exception">The exception.</param>
            <param name="log">The log entry that was being logged when the exception occurred.</param>
            <param name="traceSourceName">The name of the trace source for which the entry was being logged.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.AsyncTracingErrorReporter.ReportErrorDuringTracing(System.String)">
            <summary>
            Reports an error during asynchronous tracing.
            </summary>
            <param name="message">The error message to trace.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.CategoryFilterMode">
            <summary>
            Represents the possible modes for client-side category filtering.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.CategoryFilterMode.AllowAllExceptDenied">
            <summary>
            Allow all categories except those explicitly denied
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.CategoryFilterMode.DenyAllExceptAllowed">
            <summary>
            Deny all categories except those explicitly allowed
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData">
            <summary>
            Represents a single category filter configuration settings.
            </summary>
            <summary>
            Represents a single category filter configuration settings.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogFilterData">
            <summary>
            Base class for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter"/> configuration objects.
            </summary>
            <remarks>
            This class should be made abstract, but in order to use it in a NameTypeConfigurationElementCollection
            it must be public and have a no-args constructor.
            </remarks>
            <summary>
            Base class for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter"/> configuration objects.
            </summary>
            <remarks>
            This class should be made abstract, but in order to use it in a NameTypeConfigurationElementCollection
            it must be public and have a no-args constructor.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogFilterData.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogFilterData"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogFilterData.GetRegistrations">
            <summary>
            Returns a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> for this data section.
            </summary>
            <remarks>
            This must be overridden by any subclasses, but is not abstract due to configuration section serialization constraints.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData.GetRegistrations">
            <summary>
            Creates an enumeration of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> instances describing the filter represented by 
            this configuration object.
            </summary>
            <returns>A an enumeration of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> instance describing a filter.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData.CategoryFilterMode">
            <summary>
            One of <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData.CategoryFilterMode"/> enumeration.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData.CategoryFilters">
            <summary>
            Collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterEntry">
            <summary>
            Represents a single <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterEntry"/> configuration settings.
            </summary>
            <summary>
            Represents a single <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterEntry"/> configuration settings.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CategoryFilterBuilderExtensions">
            <summary>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationOptions"/> extensions to configure <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter"/> instances.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CategoryFilterBuilderExtensions.FilterOnCategory(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationOptions,System.String)">
            <summary>
            Adds an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter"/> instance to the logging configuration.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="categoryFilterName">Name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter"/> instance added to configuration.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.LoggingConfigurationExtension">
            <summary/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationOptions">
            <summary>
            Fluent interface that allows global logging settings to be configured.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationContd">
            <summary>
            Fluent interface that allows log categories to be set up.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationContd.LogToCategoryNamed(System.String)">
            <summary>
            Creates a Category Source in the configuration schema with the specified name.
            </summary>
            <param name="categoryName">The name of the Category Source.</param>
            <returns>Fluent interface that allows for this Category Source to be configured further.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationContd.SpecialSources">
            <summary>
            Returns an interface that can be used to configure special logging categories.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationOptions.DisableTracing">
            <summary>
            Disables tracing in the configuration schema. <br/>
            Tracing is enabled by default.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationOptions.DoNotLogWarningsWhenNoCategoryExists">
            <summary>
            Specifies that no warnings should be logged for non-existent categories. <br/>
            Warnings are logged for non-existent categories by default.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationExtension">
            <summary>
            Allows access to the internal configuration classes used to configure the logging application block.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationExtension.LoggingOptions">
            <summary>
            Returns a fluent interface that can be used to configure global logging application block settings.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationExtension.LoggingSettings">
            <summary>
            Returns the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationExtension.LoggingSettings"/> that are being build up.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.LoggingConfigurationExtension.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationContd)">
            <summary/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.LoggingConfigurationExtension.LoggingSettings">
            <summary/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.LoggingConfigurationExtension.LoggingOptions">
            <summary/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationFilterOnCategory">
            <summary>
            Fluent interface used to configure a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter"/> instance.
            </summary>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter"/>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationFilterOnCategory.AllowAllCategoriesExcept(System.String[])">
            <summary>
            Specifies that logging is enabled for the specified categories.<br/>
            Disabled for all other categories.
            </summary>
            <param name="categories">The categories for which logging should be enabled.</param>
            <returns>Fluent interface for further configuring logging settings.</returns>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter"/>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationFilterOnCategory.DenyAllCategoriesExcept(System.String[])">
            <summary>
            Specifies that logging is disabled for the specified categories.<br/>
            Enabled for all other categories.
            </summary>
            <param name="categories">The categories for which logging should be disabled.</param>
            <returns>Fluent interface for further configuring logging settings.</returns>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter"/>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToNotificationTraceListenerExtensions">
            <summary>
            Extension methods to support configuration of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.NotificationTraceListener"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToNotificationTraceListenerExtensions.Notification(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendTo,System.String)">
            <summary>
            Adds a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.NotificationTraceListener"/> to the logging settings and creates
            a reference to this Trace Listener for the current category source.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="listenerName">The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.NotificationTraceListener"/>.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.NotificationTraceListenerData"/>. </returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.NotificationTraceListenerData"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.SendToTraceListenerExtension">
            <summary>
            Base Class for extension points that configure Trace Listeners within Category Sources.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCategoryContd">
            <summary>
            Fluent interface that allows tracelisteners to be configured for a Category Source.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCategoryContd.SendTo">
            <summary>
            Entry point for attaching Trace Listeners to a Category Source.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.SendToTraceListenerExtension.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendTo)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.SendToTraceListenerExtension"/>.
            </summary>
            <param name="context">The fluent interface extension used to configure Trace Listeners. <br/>
            Must implement <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToExtension"/>.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.SendToTraceListenerExtension.AddTraceListenerToSettingsAndCategory(Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData)">
            <summary>
            Adds a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData"/> instance to the logging settings and adds a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerReferenceData"/> to the current Category Source.
            </summary>
            <param name="traceListenerData">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData"/> that should be added to configuration.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.SendToTraceListenerExtension.LoggingSettings">
            <summary>
            The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.SendToTraceListenerExtension.LoggingSettings"/> Configuration Section that is currently being build.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.SendToTraceListenerExtension.CurrentTraceSource">
            <summary>
            The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData"/> Configuration Section that is currently being build.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToNotificationTraceListener">
            <summary>
            Fluent interface used to specify settings on a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.NotificationTraceListenerData"/>.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.NotificationTraceListenerData"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToIsolatedStorageTraceListener">
            <summary>
            Fluent interface used to specify settings on a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.IsolatedStorageTraceListenerData"/>.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.IsolatedStorageTraceListenerData"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToIsolatedStorageTraceListener.WithRepositoryName(System.String)">
            <summary>
            Specifies the name of the repository for entries.
            </summary>
            <param name="repositoryName">The name of the repository that should be used.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.IsolatedStorageTraceListenerData"/>.</returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageTraceListener"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.IsolatedStorageTraceListenerData"/>
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.IsolatedStorageTraceListenerData.RepositoryName"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToIsolatedStorageTraceListener.SetMaxSizeInKilobytes(System.Int32)">
            <summary>
            Specifies the maximum size in kilobytes to be used when storing entries.
            </summary>
            <param name="maxSizeInKilobytes">The maximum size in kilobytes.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.IsolatedStorageTraceListenerData"/>.</returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageTraceListener"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.IsolatedStorageTraceListenerData"/>
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.IsolatedStorageTraceListenerData.MaxSizeInKilobytes"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToIsolatedStorageTraceListenerExtensions">
            <summary>
            Extension methods to support configuration of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageTraceListener"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToIsolatedStorageTraceListenerExtensions.IsolatedStorage(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendTo,System.String)">
            <summary>
            Adds a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageTraceListener"/> to the logging settings and creates
            a reference to this Trace Listener for the current category source.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="listenerName">The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageTraceListener"/>.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.IsolatedStorageTraceListenerData"/>. </returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.IsolatedStorageTraceListenerData"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCategoryOptions">
            <summary>
            Fluent interface to further configure a logging category source.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCategoryOptions.ToSourceLevels(Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.SourceLevels)">
            <summary>
            Specified the default <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.SourceLevels"/> for this Category.<br/>
            By default the source level is set to <see cref="F:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.SourceLevels.All"/>.
            </summary>
            <param name="sourceLevels">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.SourceLevels"/> to be set as default.</param>
            <returns>Fluent interface that allows for this Category Source to be configured further.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCategoryOptions.DoNotAutoFlushEntries">
            <summary>
            Specifies that Flush doesn't have to be called after every write to a listener.<br/>
            By default a Flush will be called after every write to a listener.
            </summary>
            <returns>Fluent interface that allows for this Category Source to be configured further.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCategoryStart">
            <summary>
            Fluent interface that allows settings to be configured for a Category Source.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCategoryStart.WithOptions">
            <summary>
            Returns a fluent interface for further configuring a logging category.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCustomCategoryOptions">
            <summary>
            Fluent interface used to configure a custom logging category.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCustomCategoryOptions.ToSourceLevels(Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.SourceLevels)">
            <summary>
            Specified the default <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.SourceLevels"/> for this Category.<br/>
            By default the source level is set to <see cref="F:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.SourceLevels.All"/>.
            </summary>
            <param name="sourceLevels">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.SourceLevels"/> to be set as default.</param>
            <returns>Fluent interface that allows for this Category Source to be configured further.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCustomCategoryOptions.DoNotAutoFlushEntries">
            <summary>
            Specifies that Flush doesn't have to be called after every write to a listener.<br/>
            By default a Flush will be called after every write to a listener.
            </summary>
            <returns>Fluent interface that allows for this Category Source to be configured further.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCustomCategoryOptions.SetAsDefaultCategory">
            <summary>
            Specifies that this category will be the default category.
            </summary>
            <returns>Fluent interface that allows for this Category Source to be configured further.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCustomCategoryStart">
            <summary>
            Fluent interface that allows settings to be configured for a custom category source.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCustomCategoryStart.WithOptions">
            <summary>
            Returns a fluent interface that can be used to further configure a custom category source.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationFilterLogEnabled">
            <summary>
            Fluent interface used to configure a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogEnabledFilter"/> instance.
            </summary>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogEnabledFilter"/>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogEnabledFilterData"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationFilterLogEnabled.Enable">
            <summary>
            Specifies that all logging should be enabled. <br/>
            The default for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogEnabledFilter"/> is that all logging is disabled.
            </summary>
            <returns>Fluent interface used to further configure the logging application block.</returns>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogEnabledFilter"/>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogEnabledFilterData"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationFilterOnPriority">
            <summary>
            Fluent interface used to configure a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter"/> instance.
            </summary>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter"/>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.PriorityFilterData"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationFilterOnPriority.StartingWithPriority(System.Int32)">
            <summary>
            Specifies that log messages with a priority below <paramref name="minimumPriority"/> should not be logged.
            </summary>
            <param name="minimumPriority">The minimum priority for log messages to pass this filter</param>
            <returns>Fluent interface to further configure this <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter"/> instance.</returns>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter"/>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.PriorityFilterData"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationFilterOnPriority.UpToPriority(System.Int32)">
            <summary>
            Specifies that log messages with a priority above <paramref name="maximumPriority"/> should not be logged.
            </summary>
            <param name="maximumPriority">The maximum priority for log messages to pass this filter</param>
            <returns>Fluent interface to further configure this <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter"/> instance.</returns>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter"/>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.PriorityFilterData"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendTo">
            <summary>
            Fluent interface that allows tracelisteners to be configured.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendTo.SharedListenerNamed(System.String)">
            <summary>
            Creates a reference to an existing Trace Listener with a specific name.
            </summary>
            <param name="listenerName">The name of the Trace Listener a reference should be made for.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToExtension">
            <summary>
            Allows access to the configuration classes used to configure <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener"/> instances.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToExtension.LoggingCategoryContd">
            <summary>
            Returns an interface that can be used to configure a logging category.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToExtension.CurrentTraceSource">
            <summary>
            Returns the logging category configuration currently being built up.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToRemoteServiceTraceListener">
            <summary>
            Fluent interface used to specify settings on a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData"/>.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToRemoteServiceTraceListener.SetSubmitInterval(System.TimeSpan)">
            <summary>
            Specifies the time interval that will be used for submitting the log entries to the server.
            </summary>
            <param name="submitInterval">The time interval that should be used.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData"/>.</returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData"/>
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData.SubmitInterval"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToRemoteServiceTraceListener.SendsImmediately">
            <summary>
            Specifies that the log entries should be sent shortly after they have been logged, without waiting until 
            the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData.SubmitInterval"/> interval value has elapsed.
            </summary>
            <remarks>
            Do not send immediately in order to buffer as many entries as possible during the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData.SubmitInterval"/> time,
            and have potentially fewer and larger requests to the server.
            Send immediately if you prefer to try to submit the entries as soon as possible, potentially sending only one or few log 
            entries per server call.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData"/>
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData.SendImmediately"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToRemoteServiceTraceListener.SetIsolatedStorageBufferMaxSizeInKilobytes(System.Int32)">
            <summary>
            Specifies the maximum size in kilobytes to be used when storing entries into the isolated storage as a backup strategy.
            </summary>
            <param name="maxSizeInKilobytes">The maximum size in kilobytes.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData"/>.</returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData"/>
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData.IsolatedStorageBufferMaxSizeInKilobytes"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToRemoteServiceTraceListener.SetMaxElementsInBuffer(System.Int32)">
            <summary>
            Specifies the maximum amount of elements that will be buffered in memory for when there are connectivity issues that prevent the listener from submitting the log entries.
            </summary>
            <param name="maxElementsInBuffer">The maximum number of items.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData"/>.</returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData"/>
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData.MaxElementsInBuffer"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToRemoteServiceTraceListener.WithLoggingServiceEndpointConfigurationName(System.String)">
            <summary>
            Specifies the WCF endpoint configuration name for the logging service, which
            must be present in the ServiceReferences.ClientConfig file of the main application. 
            </summary>
            <param name="endpointConfigurationName">The endpoint configuration name.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData"/>.</returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData"/>
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData.LoggingServiceFactory"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToRemoteServiceTraceListener.WithLoggingServiceFactory(Microsoft.Practices.EnterpriseLibrary.Logging.Service.ILoggingServiceFactory)">
            <summary>
            Specifies the factory for creating transient <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Service.ILoggingService"/> type instances.
            </summary>
            <param name="loggingServiceFactory">The factory instance that will be used to create transient <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Service.ILoggingService"/> type instances.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData"/>.</returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData"/>
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData.LoggingServiceFactory"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSpecialSources">
            <summary>
            Fluent interface used to configure pre defined logging categories.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSpecialSources.LoggingErrorsAndWarningsCategory">
            <summary>
            Returns an interface to configure the category source used for internal errors and warnings.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSpecialSources.UnprocessedCategory">
            <summary>
            Returns an interface to configure the category source used to log messages that could not be processed
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSpecialSources.AllEventsCategory">
            <summary>
            Returns an interface to configure the category source used to log all events.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationStart">
            <summary>
            Fluent interface that allows global logging settings to be configured.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationStart.WithOptions">
            <summary>
            Returns an fluent interface that can be used to further configure logging settings.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.LogEnabledFilterBuilderExtensions">
            <summary/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.LogEnabledFilterBuilderExtensions.FilterEnableOrDisable(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationOptions,System.String)">
            <summary/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.LoggingConfigurationSourceBuilderExtensions">
            <summary>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder"/> extensions to support creation of logging configuration sections.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.LoggingConfigurationSourceBuilderExtensions.ConfigureLogging(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder)">
            <summary>
            Main entry point to configuration a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings"/> section.
            </summary>
            <param name="configurationSourceBuilder">The builder interface to extend.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PriorityFilterBuilderExtensions">
            <summary/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PriorityFilterBuilderExtensions.FilterOnPriority(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationOptions,System.String)">
            <summary/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToRemoteServiceTraceListenerExtensions">
            <summary>
            Extension methods to support configuration of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToRemoteServiceTraceListenerExtensions.RemoteService(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendTo,System.String)">
            <summary>
            Adds a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener"/> to the logging settings and creates
            a reference to this Trace Listener for the current category source.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="listenerName">The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener"/>.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData"/>. </returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.IRemoteServiceTraceListenerUpdateContext">
            <summary>
            Provides an update context for changing the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener"/> settings.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.ITraceListenerUpdateContext">
            <summary>
            Provides an update context for changing the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener"/> settings.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.ITraceListenerUpdateContext.Name">
            <summary>
            Gets the name for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener"/> instance being configured.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.IRemoteServiceTraceListenerUpdateContext.SendImmediately">
            <summary>
            Gets or sets a value indicating if the log entries should be sent shortly after they have been logged, or else 
            wait until the submit interval value has elapsed.
            </summary>
            <remarks>
            Set this value to <see langword="false"/> in order to buffer as many entries as possible during the submit interval time,
            and have potentially fewer and larger requests to the server.
            Set this value to <see langword="true"/> if you prefer to try to submit the entries as soon as possible, potentially sending only one or few log 
            entries per server call.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.IRemoteServiceTraceListenerUpdateContext.IsolatedStorageBufferMaxSizeInKilobytes">
            <summary>
            Gets or sets the maximum size in kilobytes to be used when storing entries into the isolated storage as a backup strategy.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.IIsolatedStorageTraceListenerUpdateContext">
            <summary>
            Provides an update context for changing the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageTraceListener"/> settings.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.IIsolatedStorageTraceListenerUpdateContext.MaxSizeInKilobytes">
            <summary>
            Gets or sets the maximum size in kilobytes to be used in the isolated storage by the log entry repository.
            </summary>
            <remarks>When the repository is resized, it will try to allocate the specified space, but a smaller size than the 
            specified might be allocated if not as much space is available.</remarks>
            <returns>The maximum size in kilobytes as available when the storage was initialized.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.IIsolatedStorageTraceListenerUpdateContext.IsRepositoryAvailable">
            <summary>
            Gets a value indicating if the underlying repository is available for the running instance.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.ILogSourceUpdateContext">
            <summary>
            Provides an update context for changing the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> settings.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.ILogSourceUpdateContext.Name">
            <summary>
            Gets the name for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> instance being configured.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.ILogSourceUpdateContext.Level">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.SourceLevels"/> values at which to trace for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> instance being configured.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.ILogSourceUpdateContext.AutoFlush">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.ILogSourceUpdateContext.AutoFlush"/> values for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> instance being configured.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.ILogSourceUpdateContext.Listeners">
            <summary>
            Gets a collection of configured <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener"/>s for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> instance. This collection can be updated.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.ILogWriterUpdateContext">
            <summary>
            Provides an update context for changing the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/> settings.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.ILogWriterUpdateContext.ApplyChanges">
            <summary>
            Commits the changes.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.ILogWriterUpdateContext.Categories">
            <summary>
            Gets the update contexts for all the configured categories.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.ILogWriterUpdateContext.IsLoggingEnabled">
            <summary>
            Gets or sets if logging is enabled.
            </summary>
            <returns><see langword="true"/> if logging is enabled.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.ILogWriterUpdateContext.Listeners">
            <summary>
            Gets the update contexts for all the configured <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener"/>s.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.ILogWriterUpdateContext.AllEventsCategory">
            <summary>
            Gets the update context for configured 'All Events' special category.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.ILogWriterUpdateContext.NotProcessedCategory">
            <summary>
            Gets the update context for configured 'Not Processed' special category.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.ILogWriterUpdateContext.ErrorsCategory">
            <summary>
            Gets the update context for configured 'Errors' special category.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData">
            <summary>
            A class with the data for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler"/>.
            </summary>
            <summary>
            A class with the data for the LogCallHandler.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData.#ctor">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData.GetRegistrations(System.String)">
            <summary>
            Get the set of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to
            register the call handler represented by this config element and its associated objects.
            </summary>
            <param name="nameSuffix">A suffix for the names in the generated type registration objects.</param>
            <returns>The set of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData.LogBehavior">
            <summary>
            Should the handler log before the call, after the call, or both?
            </summary>
            <value>The "logBehavior" config attribute.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData.Categories">
            <summary>
            Collection of log categories to use in the log message.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData.BeforeMessage">
            <summary>
            Message for the log entry in before-call logging.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData.AfterMessage">
            <summary>
            Message for the log entry in after-call logging.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData.EventId">
            <summary>
            Event Id to put into log entries.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData.IncludeParameterValues">
            <summary>
            Include parameter values and return values in the log entry
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData.IncludeCallStack">
            <summary>
            Include the call stack in the log entries.
            </summary>
            <remarks>Setting this to true requires UnmanagedCode permissions.</remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData.IncludeCallTime">
            <summary>
            Include the time to execute the call in the log entries.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData.Priority">
            <summary>
            The priority of the log entries.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData.Severity">
            <summary>
            The severity of the log entry.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerCategoryEntry">
            <summary>
            A class that handles the entries for the &lt;categories&gt; element
            for the Log Call handler.
            </summary>
            <summary>
            A class that handles the entries for the &lt;categories&gt; element
            for the Log Call handler.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.HandlerLogBehavior">
            <summary>
            This enum control when the logging call handler will add log entries.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.HandlerLogBehavior.BeforeAndAfter">
            <summary>
            Log both before and after the call.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.HandlerLogBehavior.Before">
            <summary>
            Log only before the call.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.HandlerLogBehavior.After">
            <summary>
            Log only after the call.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingServiceFactoryEndpointConfigurationNameConverter">
            <summary>
            Provides a unified way of converting a <see cref="T:System.String"/> to a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Service.ILoggingServiceFactory"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingServiceFactoryEndpointConfigurationNameConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the specified type to the type of this converter.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="context">An object that provides a format context.</param><param name="sourceType">The type you want to convert from.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingServiceFactoryEndpointConfigurationNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the intended conversion type of the converter.
            </summary>
            <returns>
            The converted value.
            </returns>
            <param name="context">An object that provides a format context. </param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. </param>
            <param name="value">The value to convert to the type of this converter.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData">
            <summary>
            Configuration for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData">
            <summary>
            Represents the configuration for a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener"/>.
            </summary>
            <remarks>
            Since trace listeners are not under our control, the building mechanism can't rely 
            on annotations to the trace listeners to determine the concrete <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData"/> subtype 
            when deserializing. Because of this, the schema for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData"/> includes the actual 
            type of the instance to build.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.#ctor">
            <summary>
            Initializes an instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.GetRegistrations">
            <summary>
            Returns the type <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> entries for this configuration object.
            </summary>
            <returns>A set of registry entries.</returns>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.GetTraceListenerTypeRegistration">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> entry for the actual trace listener represented by this 
            configuration object.
            </summary>
            <returns>A registry entry.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.GetCreationExpression">
            <summary>
            Gets the creation expression used to produce a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> during
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.GetRegistrations"/>.
            </summary>
            <returns>A <see cref="T:System.Linq.Expressions.Expression"/> that creates a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener"/></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData.GetCreationExpression">
            <summary>
            Gets the creation expression used to produce a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> during
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.GetRegistrations"/>.
            </summary>
            <returns>A <see cref="T:System.Linq.Expressions.Expression"/> that creates a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData.SubmitInterval">
            <summary>
            Gets or sets the time interval that will be used for submitting the log entries to the server.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData.MaxElementsInBuffer">
            <summary>
            Gets or sets the maximum amount of elements that will be buffered in memory for when there are connectivity issues that prevent the listener from submitting the log entries.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData.IsolatedStorageBufferMaxSizeInKilobytes">
            <summary>
            Gets or sets the maximum size in kilobytes to be used when storing entries into the isolated storage as a backup strategy.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData.SendImmediately">
            <summary>
            Gets or sets a value indicating if the log entries should be sent shortly after they have been logged, or else 
            wait until the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData.SubmitInterval"/> interval value has elapsed.
            </summary>
            <remarks>
            Set this value to <see langword="false"/> in order to buffer as many entries as possible during the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData.SubmitInterval"/> time,
            and have potentially fewer and larger requests to the server.
            Set this value to <see langword="true"/> if you prefer to try to submit the entries as soon as possible, potentially sending only one or few log 
            entries per server call.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RemoteServiceTraceListenerData.LoggingServiceFactory">
            <summary>
            Gets or set a factory for creating transient <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Service.ILoggingService"/> type instances.
            In XAML, you can set this property value to a string that represents the WCF endpoint configuration name, which
            must be present in the ServiceReferences.ClientConfig file of the main application. </summary>
            <remarks>
            Set this property to an instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Service.ILoggingServiceFactory"/> if supplying an endpoint configuration
            name is not enough to configure how you connect to the server. 
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.IsolatedStorageTraceListenerData">
            <summary>
            Configuration for the IsolatedStorageTraceListener.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.IsolatedStorageTraceListenerData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageTraceListener"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.IsolatedStorageTraceListenerData.GetCreationExpression">
            <summary>
            Gets the creation expression used to produce a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> during
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.IsolatedStorageTraceListenerData.GetRegistrations"/>.
            </summary>
            <returns>A <see cref="T:System.Linq.Expressions.Expression"/> that creates an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageTraceListener"/></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.IsolatedStorageTraceListenerData.GetRegistrations">
            <summary>
            Returns the type <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> entries for this configuration object.
            </summary>
            <returns>A set of registry entries.</returns>        
            <remarks>Two registrations are returned for this object, one for the trace listener itself and one for its 
            isolated storage repository.</remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.IsolatedStorageTraceListenerData.MaxSizeInKilobytes">
            <summary>
            Gets or sets the maximum size in kilobytes to be used when storing entries.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.IsolatedStorageTraceListenerData.RepositoryName">
            <summary>
            Gets or sets the name of the repository for entries.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogEnabledFilterData">
            <summary>
            Represents the configuration settings that describe a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogEnabledFilter"/>.
            </summary>
            <summary>
            Represents the configuration settings that describe a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogEnabledFilter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogEnabledFilterData.GetRegistrations">
            <summary>
            Creates an enumeration of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> instances describing the filter represented by 
            this configuration object.
            </summary>
            <returns>A an enumeration of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> instance describing a filter.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogEnabledFilterData.Enabled">
            <summary>
            Gets or sets the enabled value.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.NotificationTraceListenerData">
            <summary>
            Configuration for the NotificationTraceListener.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.NotificationTraceListenerData.GetCreationExpression">
            <summary>
            Gets the creation expression used to produce a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> during
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.GetRegistrations"/>.
            </summary>
            <returns>A <see cref="T:System.Linq.Expressions.Expression"/> that creates an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.NotificationTraceListener"/></returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.PriorityFilterData">
            <summary>
            Represents the configuration for a priority filter.
            </summary>    
            <summary>
            Represents the configuration for a priority filter.
            </summary>    
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.PriorityFilterData.GetRegistrations">
            <summary>
            Creates an enumeration of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> instances describing the filter represented by 
            this configuration object.
            </summary>
            <returns>A an enumeration of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> instance describing a filter.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.PriorityFilterData.#ctor">
            <summary>
            Initializes a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.PriorityFilterData"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.PriorityFilterData.MinimumPriority">
            <summary>
            Gets or sets the minimum value for messages to be processed.  Messages with a priority
            below the minimum are dropped immediately on the client.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.PriorityFilterData.MaximumPriority">
            <summary>
            Gets or sets the maximum priority value for messages to be processed.  Messages with a priority
            above the maximum are dropped immediately on the client.
            </summary>		
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SpecialTraceSourcesData">
            <summary>
            Represents the configuration settings that describe the "all events", "not processed" and "errors" <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>s
            for a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/>.
            </summary>
            <summary>
            Represents the configuration settings that describe the "all events", "not processed" and "errors" <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>s
            for a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SpecialTraceSourcesData.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SpecialTraceSourcesData"/> with default values.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SpecialTraceSourcesData.AllEventsTraceSource">
            <summary>
            Gets or sets the configuration for the optional trace source to send all messages received.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SpecialTraceSourcesData.NotProcessedTraceSource">
            <summary>
            Gets or sets the configuration for the optional to send messages with unknown categories.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SpecialTraceSourcesData.ErrorsTraceSource">
            <summary>
            Gets or sets the configuration for the mandatory trace source to log processing errors.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData">
            <summary>
            Represents the configuration settings that describe a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>.
            </summary>
            <summary>
            Represents the configuration settings that describe a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData"/> class with default values.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData.GetRegistrations">
            <summary>
             Returns the type <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> entries describing the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> represented
             by this configuration object.
            </summary>
            <returns>A set of registry entries.</returns>        
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData.DefaultLevel">
            <summary>
            Gets or sets the default <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.SourceLevels"/> for the trace source.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData.AutoFlush">
            <summary>
            Gets or sets the AutoFlush indicating whether Flush should be called on the Listeners after every write.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData.TraceListeners">
            <summary>
            Gets the collection of references to trace listeners for the trace source.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerReferenceData">
            <summary>
            Configuration for a reference to named <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData"/>.
            </summary>
            <summary>
            Configuration for a reference to named <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerReferenceData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerReferenceData"/> class with default values.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings">
            <summary>
            Configuration settings for client-side logging applications.
            </summary>
            <summary>
            Configuration settings for client-side logging applications.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.SectionName">
            <summary>
            Configuration section name for logging client settings.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings"/> with default values.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.#ctor(System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings"/> using the given name.
            </summary>
            <param name="name">The name to use for this instance</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings"/> using the given values.
            </summary>
            <param name="name">The name to use for this instance</param>
            <param name="tracingEnabled">Should tracing be enabled?</param>
            <param name="defaultCategory">The default category to use.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.GetLoggingSettings(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Retrieves the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings"/> section from the configuration source.
            </summary>
            <param name="configurationSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> to get the section from.</param>
            <returns>The logging section.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.GetRegistrations(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to configure
            the container.
            </summary>
            <returns>The sequence of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.GetUpdatedRegistrations(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to reconfigure
            the container after a configuration source has changed.
            </summary>
            <remarks>If there are no reregistrations, return an empty sequence.</remarks>
            <param name="configurationSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> containing
            the configuration information.</param>
            <returns>The sequence of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.TracingEnabled">
            <summary>
            Enable or disable trace logging.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.Name">
            <summary>
            Gets or sets the name of the configuration node.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.DefaultCategory">
            <summary>
            Gets or sets the default logging category.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.TraceListeners">
            <summary>
            Gets the collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData"/> configuration elements that define 
            the available <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener"/>s.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.LogFilters">
            <summary>
            Gets the collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogFilterData"/> configuration elements that define 
            the available <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter"/>s.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.TraceSources">
            <summary>
            Gets the collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData"/> configuration elements that define 
            the available <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>s.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.SpecialTraceSources">
            <summary>
            Gets or sets the configuration elements that define the distinguished <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>s: 
            for all events. for missing categories, and for errors and warnings.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.LogWarningWhenNoCategoriesMatch">
            <summary>
            Gets or sets the indication that a warning should be logged when a category is not found while 
            dispatching a log entry.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.RevertImpersonation">
            <summary>
            Gets or sets the indication that impersonation should be reverted temporarily while logging, if enabled.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.CorrelationManager">
            <summary>
            Correlates traces that are part of a logical transaction. 
            </summary>
            <remarks>
            This class supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </remarks>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.CorrelationManager.logicalOperationStack">
            Need to use thread-static fields for thread-isolated storage in Silverlight
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.CorrelationManager.StartLogicalOperation(System.Object)">
            <summary>
            Starts a new logical operation with the given operation id.
            </summary>
            <param name="operationId">The operation id.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.CorrelationManager.StopLogicalOperation">
            <summary>
            Stops the last operation.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.CorrelationManager.ActivityId">
            <summary>
            Gets or sets the activity id for the current thread.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.CorrelationManager.LogicalOperationStack">
            <summary>
            Gets the logical operation stack for the current thread.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.Trace">
            <summary>
            Entry point for the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.Trace.CorrelationManager"/>.
            </summary>
            <remarks>
            This class supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.Trace.CorrelationManager">
            <summary>
            Gets the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.Trace.CorrelationManager"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource">
            <summary>
            Provides tracing services through a set of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener"/>s.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.DefaultAutoFlushProperty">
            <summary>
            Default Auto Flush property for the LogSource instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.GetUpdateContext(System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener})">
            <summary>
            Provides an update context to batch change requests to the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> configuration.
            </summary>
            <param name="availableTraceListeners">The available trace listeners to be used.</param>
            <returns>Returns an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.ILogSourceUpdateContext"/> instance that can be used to apply the configuration changes.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> class with a name.
            </summary>
            <param name="name">The name for the instance.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.SourceLevels)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> class with a name and a level.
            </summary>
            <param name="name">The name for the instance.</param>
            <param name="level">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.SourceLevels"/> value.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener},Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.SourceLevels)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> class with a name, a collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener"/>s and a level.
            </summary>
            <param name="name">The name for the instance.</param>
            <param name="traceListeners">The collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener"/>s.</param>
            <param name="level">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.SourceLevels"/> value.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener},Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.SourceLevels,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> class with a name, a collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener"/>s, a level and the auto flush.
            </summary>
            <param name="name">The name for the instance.</param>
            <param name="traceListeners">The collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener"/>s.</param>
            <param name="level">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.SourceLevels"/> value.</param>
            <param name="autoFlush">If Flush should be called on the Listeners after every write.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener},Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.SourceLevels,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ILoggingInstrumentationProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> class with a name, a collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener"/>s, a level and the auto flush.
            </summary>
            <param name="name">The name for the instance.</param>
            <param name="traceListeners">The collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener"/>s.</param>
            <param name="level">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.SourceLevels"/> value.</param>
            <param name="autoFlush">If Flush should be called on the Listeners after every write.</param>
            <param name="instrumentationProvider">The instrumentation provider to use.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.TraceData(Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType,System.Int32,Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Writes trace data to the trace listeners in the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.Listeners"/> collection using the specified 
            event type, event identifier, and trace data. 
            </summary>
            <param name="eventType">The value that specifies the type of event that caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="logEntry">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> to trace.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.TraceData(Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType,System.Int32,Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry,Microsoft.Practices.EnterpriseLibrary.Logging.TraceListenerFilter)">
            <summary>
            Writes trace data to the trace listeners in the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.Listeners"/> collection that have not already been
            written to for tracing using the specified event type, event identifier, and trace data.
            </summary>
            <remarks>
            The <paramref name="traceListenerFilter"/> will be updated to reflect the trace listeners that were written to by the 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>.
            </remarks>
            <param name="eventType">The value that specifies the type of event that caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="logEntry">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> to trace.</param>
            <param name="traceListenerFilter">The filter for already written to trace listeners.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"><see langword="true"/> if the method is being called from the <see cref="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.Dispose"/> method. <see langword="false"/> if it is being called from within the object finalizer.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.Finalize">
            <summary>
            Releases resources for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> instance before garbage collection.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.Name">
            <summary>
            Gets the name for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> instance.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.Listeners">
            <summary>
            Gets the collection of trace listeners for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> instance.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.Level">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.SourceLevels"/> values at which to trace for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> instance.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.AutoFlush">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.AutoFlush"/> values for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> instance.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.LogSourceUpdateContext">
            <summary>
            Provides an update context for changing the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.LogSourceUpdateContext.LogSource"/> settings.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.ICommitable">
            <summary>
            Provides a way to apply batched changes made to an update context.
            </summary>
            <remarks>This service should not be used directly from client code, and it's meant to be used by
            the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/> implementations internally.</remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.ICommitable.Commit">
            <summary>
            Commits the changes.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.LogSourceUpdateContext.#ctor(Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.LogSourceUpdateContext"/>/
            </summary>
            <param name="logSource">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.LogSourceUpdateContext.LogSource"/> being configured.</param>
            <param name="availableTraceListeners">A collection of all the available <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener"/>s in the application.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.LogSourceUpdateContext.ApplyChanges">
            <summary>
            Applies the changes.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.LogSourceUpdateContext.Name">
            <summary>
            Gets the name for the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.LogSourceUpdateContext.LogSource"/> instance being configured.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.LogSourceUpdateContext.Level">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.SourceLevels"/> values at which to trace for the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.LogSourceUpdateContext.LogSource"/> instance being configured.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.LogSourceUpdateContext.AutoFlush">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.LogSourceUpdateContext.AutoFlush"/> values for the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.LogSourceUpdateContext.LogSource"/> instance being configured.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.LogSourceUpdateContext.Listeners">
            <summary>
            Gets a collection of configured <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener"/>s for the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.LogSourceUpdateContext.LogSource"/> instance. This collection can be updated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.LogSourceUpdateContext.LogSource">
            <summary>
            Gets the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.LogSourceUpdateContext.LogSource"/> being configured.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.TraceLogEntry">
            <summary>
            A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> class that contains the extra information logged by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry">
            <summary>
            Represents a log message.  Contains the common properties that are required for all log messages.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.#ctor">
            <summary>
            Initialize a new instance of a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.#ctor(System.Object,System.String,System.Int32,System.Int32,Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> with a full set of constructor parameters
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="category">Category name used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="eventId">Event number or identifier.</param>
            <param name="severity">Log entry severity as a <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.Severity"/> enumeration. (Unspecified, Information, Warning or Error).</param>
            <param name="title">Additional description of the log entry message.</param>
            <param name="properties">Dictionary of key/value pairs to record.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.#ctor(System.Object,System.Collections.Generic.ICollection{System.String},System.Int32,System.Int32,Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> with a full set of constructor parameters
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="categories">Collection of category names used to route the log entry to a one or more sinks.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="eventId">Event number or identifier.</param>
            <param name="severity">Log entry severity as a <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.Severity"/> enumeration. (Unspecified, Information, Warning or Error).</param>
            <param name="title">Additional description of the log entry message.</param>
            <param name="properties">Dictionary of key/value pairs to record.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.Clone">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> that is a copy of the current instance.
            </summary>
            <remarks>
            If the dictionary contained in <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.ExtendedProperties"/> implements <see cref="T:System.ICloneable"/>, the resulting
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> will have its ExtendedProperties set by calling <c>Clone()</c>. Otherwise the resulting
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> will have its ExtendedProperties set to <see langword="null"/>.
            </remarks>
            <implements>ICloneable.Clone</implements>
            <returns>A new <c>LogEntry</c> that is a copy of the current instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.AddErrorMessage(System.String)">
            <summary>
            Add an error or warning message to the start of the messages string builder.
            </summary>
            <param name="message">Message to be added to this instance</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/>, 
            using a default formatting template.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.CollectIntrinsicProperties">
            <summary>
            Set the intrinsic properties such as MachineName and UserIdentity.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.Message">
            <summary>
            Message body to log.  Value from ToString() method from message object.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.Categories">
            <summary>
            Category name used to route the log entry to a one or more trace listeners.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.Priority">
            <summary>
            Importance of the log message.  Only messages whose priority is between the minimum and maximum priorities (inclusive)
            will be processed.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.EventId">
            <summary>
            Event number or identifier.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.Severity">
            <summary>
            Log entry severity as a <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.Severity"/> enumeration. (Unspecified, Information, Warning or Error).
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.LoggedSeverity">
            <summary>
            <para>Gets the string representation of the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.Severity"/> enumeration.</para>
            </summary>
            <value>
            <para>The string value of the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.Severity"/> enumeration.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.Title">
            <summary>
            Additional description of the log entry message.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.TimeStamp">
            <summary>
            Date and time of the log entry message.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.AppDomainName">
            <summary>
            The <see cref="T:System.AppDomain"/> in which the program is running
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.ManagedThreadName">
            <summary>
            The name of the .NET thread.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.ExtendedProperties">
            <summary>
            Dictionary of key/value pairs to record.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.TimeStampString">
            <summary>
            Read-only property that returns the timeStamp formatted using the current culture.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.ActivityId">
            <summary>
            Tracing activity id
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.RelatedActivityId">
            <summary>
            Related activity id
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.ErrorMessages">
            <summary>
            Gets the error message with the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"></see>
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.ActivityIdString">
            <summary>
            Tracing activity id as a string to support WMI Queries
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.TraceLogEntry.TypeName">
            <summary>
            Gets or sets the name of type implementing the method being called.
            </summary>
            <value>The type name</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.TraceLogEntry.MethodName">
            <summary>
            Gets or sets the method name being called.
            </summary>
            <value>The method name</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.TraceLogEntry.ReturnValue">
            <summary>
            Return value from the call.
            </summary>
            <value>return value</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.TraceLogEntry.CallStack">
            <summary>
            The call stack from the current call.
            </summary>
            <value>call stack string.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.TraceLogEntry.Exception">
            <summary>
            Exception thrown from the target.
            </summary>
            <value>If exception was thrown, this is the exception object. Null if no exception thrown.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.TraceLogEntry.CallTime">
            <summary>
            Total time to call the target.
            </summary>
            <value>null if not logged, else the elapsed time.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.TraceLogEntry.ElapsedTime">
            <summary>
            This is to support WMI instrumentation by returning
            the actual <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.TraceLogEntry.CallTime"/> 
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler">
            <summary>
            An <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/> that will log information using the
            Logging Application Block before and/or after the
            call to the target completes.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.#ctor">
            <summary>
            Creates a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler"/> with default settings that writes
            to the default log writer.
            </summary>
            <remarks>See the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults"/> class for the default values.</remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.#ctor(Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter)">
            <summary>
            Creates a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler"/> with default settings that writes
            to the given <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.LogWriter"/>.
            </summary>
            <remarks>See the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults"/> class for the default values.</remarks>
            <param name="logWriter"><see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.LogWriter"/> to write logs to.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.#ctor(Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter,System.Int32,System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler"/> that writes to the specified <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.LogWriter"/>
            using the given logging settings.
            </summary>
            <param name="logWriter"><see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.LogWriter"/> to write log entries to.</param>
            <param name="eventId">EventId to include in log entries.</param>
            <param name="logBeforeCall">Should the handler log information before calling the target?</param>
            <param name="logAfterCall">Should the handler log information after calling the target?</param>
            <param name="beforeMessage">Message to include in a before-call log entry.</param>
            <param name="afterMessage">Message to include in an after-call log entry.</param>
            <param name="includeParameters">Should the parameter values be included in the log entry?</param>
            <param name="includeCallStack">Should the current call stack be included in the log entry?</param>
            <param name="includeCallTime">Should the time to execute the target be included in the log entry?</param>
            <param name="priority">Priority of the log entry.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.#ctor(Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter,System.Int32,System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler"/> that writes to the specified <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.LogWriter"/>
            using the given logging settings.
            </summary>
            <param name="logWriter"><see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.LogWriter"/> to write log entries to.</param>
            <param name="eventId">EventId to include in log entries.</param>
            <param name="logBeforeCall">Should the handler log information before calling the target?</param>
            <param name="logAfterCall">Should the handler log information after calling the target?</param>
            <param name="beforeMessage">Message to include in a before-call log entry.</param>
            <param name="afterMessage">Message to include in an after-call log entry.</param>
            <param name="includeParameters">Should the parameter values be included in the log entry?</param>
            <param name="includeCallStack">Should the current call stack be included in the log entry?</param>
            <param name="includeCallTime">Should the time to execute the target be included in the log entry?</param>
            <param name="priority">Priority of the log entry.</param>
            <param name="order">Order in which the handler will be executed.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.Invoke(Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,Microsoft.Practices.Unity.InterceptionExtension.GetNextHandlerDelegate)">
            <summary>
            Executes the call handler.
            </summary>
            <param name="input"><see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation"/> containing the information about the current call.</param>
            <param name="getNext">delegate to get the next handler in the pipeline.</param>
            <returns>Return value from the target method.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.EventId">
            <summary>
            Event ID to include in log entry
            </summary>
            <value>event id</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.LogBeforeCall">
            <summary>
            Should there be a log entry before calling the target?
            </summary>
            <value>true = yes, false = no</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.LogAfterCall">
            <summary>
            Should there be a log entry after calling the target?
            </summary>
            <value>true = yes, false = no</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.BeforeMessage">
            <summary>
            Message to include in a pre-call log entry.
            </summary>
            <value>The message</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.AfterMessage">
            <summary>
            Message to include in a post-call log entry.
            </summary>
            <value>the message.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.Categories">
            <summary>
            Gets the collection of categories to place the log entries into.
            </summary>
            <remarks>The category strings can include replacement tokens. See
            the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.CategoryFormatter"/> class for the list of tokens.</remarks>
            <value>The list of category strings.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.IncludeParameters">
            <summary>
            Should the log entry include the parameters to the call?
            </summary>
            <value>true = yes, false = no</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.IncludeCallStack">
            <summary>
            Should the log entry include the call stack?
            </summary>
            <remarks>Logging the call stack requires full trust code access security permissions.</remarks>
            <value>true = yes, false = no</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.IncludeCallTime">
            <summary>
            Should the log entry include the time to execute the target?
            </summary>
            <value>true = yes, false = no</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.Priority">
            <summary>
            Priority for the log entry.
            </summary>
            <value>priority</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.Severity">
            <summary>
            Severity to log at.
            </summary>
            <value><see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType"/> giving the severity.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.LogWriter">
            <summary>
            Log writer to log to.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.Order">
            <summary>
            Gets or sets the order in which the handler will be executed
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults">
            <summary>
            A class containing the default values for the various <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler"/> settings.
            </summary>
            <remarks>The default values are:
            <list type="table">
            <item><term>EventId</term><description>0</description></item>
            <item><term>LogBeforeCall</term><description>true</description></item>
            <item><term>LogAfterCall</term><description>true</description></item>
            <item><term>BeforeMessage</term><description></description></item>
            <item><term>AfterMessage</term><description></description></item>
            <item><term>Title</term><description>Call Logging</description></item>
            <item><term>IncludeParameters</term><description>true</description></item>
            <item><term>IncludeCallStack</term><description>false</description></item>
            <item><term>IncludeCallTime</term><description>true</description></item>
            <item><term>Priority</term><description>-1</description></item>
            <item><term>Severity</term><description><see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType"/>.Information</description></item>
            </list></remarks>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults.Order">
            <summary>
            Default Order = 0
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults.EventId">
            <summary>
            Default EventId = 0
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults.LogBeforeCall">
            <summary>
            Default option to log before the call = true
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults.LogAfterCall">
            <summary>
            Default option to log after the call = true
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults.IncludeParameters">
            <summary>
            Default option to include parameter values = true
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults.IncludeCallStack">
            <summary>
            Default option to include the call stack = false
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults.IncludeCallTime">
            <summary>
            Default option to include total time to call target = true
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults.Priority">
            <summary>
            Default priority = -1
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults.Severity">
            <summary>
            Default severity = <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType"/>.Information
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults.BeforeMessage">
            <summary>
            Default message in before-call logs = nothing
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults.AfterMessage">
            <summary>
            Default message in after-call logs = nothing
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults.Title">
            <summary>
            Default log entry title = "Call Logging" (localizable)
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter">
            <summary>
            Instance based class to write log messages based on a given configuration.
            Messages are routed based on category.
            </summary>
            <remarks>
            <para>
            The LogWriter works as an entry point to the <see cref="N:System.Diagnostics"/> trace listeners. 
            It will trace the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> through the <see cref="N:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners"/>s associated with the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>s 
            for all the matching categories in the elements of the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.Categories"/> property of the log entry. 
            If the "all events" special log source is configured, the log entry will be traced through the log source regardless of other categories 
            that might have matched.
            If the "all events" special log source is not configured and the "unprocessed categories" special log source is configured,
            and the category specified in the logEntry being logged is not defined, then the logEntry will be logged to the "unprocessed categories"
            special log source.
            If both the "all events" and "unprocessed categories" special log sources are not configured and the property LogWarningsWhenNoCategoriesMatch
            is set to true, then the logEntry is logged to the "logging errors and warnings" special log source.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.LogWriterFailureEventID">
            <summary>
            EventID used on LogEntries that occur when internal LogWriter mechanisms fail.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.StartTrace(System.String)">
            <summary>
            Starts a new tracing operation.
            </summary>
            <param name="operation">The operation id.</param>
            <returns>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/> representing the tracing operation.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.StartTrace(System.String,System.Guid)">
            <summary>
            Starts a new tracing operation.
            </summary>
            <param name="operation">The operation id.</param>
            <param name="activityId">The activity id.</param>
            <returns>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/> representing the tracing operation.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.GetUpdateContext">
            <summary>
            Provides an update context to batch change requests to the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/> configuration,
            and apply all the changes in a single call <see cref="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.ILogWriterUpdateContext.ApplyChanges"/>.
            </summary>
            <returns>Returns an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.ILogWriterUpdateContext"/> instance that can be used to apply the configuration changes.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Dispose">
            <summary>
            Releases the resources used by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/>.
            </summary>
            <param name="disposing"><see langword="true"/> when disposing, <see langword="false"/> otherwise.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.GetFilter``1">
            <summary>
            Returns the filter of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of filter required.</typeparam>
            <returns>The instance of <typeparamref name="T"/> in the filters collection, or <see langword="null"/> 
            if there is no such instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.GetFilter``1(System.String)">
            <summary>
            Returns the filter of type <typeparamref name="T"/> named <paramref name="name"/>.
            </summary>
            <typeparam name="T">The type of filter required.</typeparam>
            <param name="name">The name of the filter required.</param>
            <returns>The instance of <typeparamref name="T"/> named <paramref name="name"/> in 
            the filters collection, or <see langword="null"/> if there is no such instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.GetFilter(System.String)">
            <summary>
            Returns the filter named <paramref name="name"/>.
            </summary>
            <param name="name">The name of the filter required.</param>
            <returns>The filter named <paramref name="name"/> in 
            the filters collection, or <see langword="null"/> if there is no such filter.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.GetMatchingTraceSources(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Gets a list of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> objects for the log entry.
            </summary>
            <param name="logEntry">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> to get the matching trace sources.</param>
            <returns>A collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> objects.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.IsLoggingEnabled">
            <summary>
            Queries whether logging is enabled.
            </summary>
            <returns><b>true</b> if logging is enabled.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.IsTracingEnabled">
            <summary>
            Queries whether tracing is enabled.
            </summary>
            <returns><b>true</b> if tracing is enabled.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.ResetLockTimeouts">
            <summary>
            Reset lock timeouts to their original values.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.ShouldLog(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Queries whether a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> should be logged.
            </summary>
            <param name="log">The log entry to check.</param>
            <returns><b>true</b> if the entry should be logged.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object)">
            <overloads>
            Write a new log entry to the default category.
            </overloads>
            <summary>
            Write a new log entry to the default category.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.String)">
            <summary>
            Write a new log entry to a specific category.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="category">Category name used to route the log entry to a one or more trace listeners.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.String,System.Int32)">
            <summary>
            Write a new log entry with a specific category and priority.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="category">Category name used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.String,System.Int32,System.Int32)">
            <summary>
            Write a new log entry with a specific category, priority and event id.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="category">Category name used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="eventId">Event number or identifier.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.String,System.Int32,System.Int32,Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType)">
            <summary>
            Write a new log entry with a specific category, priority, event id and severity.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="category">Category name used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="eventId">Event number or identifier.</param>
            <param name="severity">Log entry severity as a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType"/> enumeration. (Unspecified, Information, Warning or Error).</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.String,System.Int32,System.Int32,Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType,System.String)">
            <summary>
            Write a new log entry with a specific category, priority, event id, severity
            and title.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="category">Category name used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="eventId">Event number or identifier.</param>
            <param name="severity">Log message severity as a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType"/> enumeration. (Unspecified, Information, Warning or Error).</param>
            <param name="title">Additional description of the log entry message</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Write a new log entry and a dictionary of extended properties.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="properties">Dictionary of key/value pairs to log.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Write a new log entry to a specific category with a dictionary 
            of extended properties.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="category">Category name used to route the log entry to a one or more trace listeners.</param>
            <param name="properties">Dictionary of key/value pairs to log.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.String,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Write a new log entry to with a specific category, priority and a dictionary 
            of extended properties.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="category">Category name used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="properties">Dictionary of key/value pairs to log.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.String,System.Int32,System.Int32,Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Write a new log entry with a specific category, priority, event Id, severity
            title and dictionary of extended properties.
            </summary>
            <example>The following example demonstrates use of the Write method with
            a full set of parameters.
            <code></code></example>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="category">Category name used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="eventId">Event number or identifier.</param>
            <param name="severity">Log message severity as a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType"/> enumeration. (Unspecified, Information, Warning or Error).</param>
            <param name="title">Additional description of the log entry message.</param>
            <param name="properties">Dictionary of key/value pairs to log.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Write a new log entry to a specific collection of categories.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="categories">Category names used to route the log entry to a one or more trace listeners.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Write a new log entry with a specific collection of categories and priority.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="categories">Category names used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32)">
            <summary>
            Write a new log entry with a specific collection of categories, priority and event id.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="categories">Category names used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="eventId">Event number or identifier.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType)">
            <summary>
            Write a new log entry with a specific collection of categories, priority, event id and severity.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="categories">Category names used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="eventId">Event number or identifier.</param>
            <param name="severity">Log entry severity as a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType"/> enumeration. 
            (Unspecified, Information, Warning or Error).</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType,System.String)">
            <summary>
            Write a new log entry with a specific collection of categories, priority, event id, severity
            and title.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="categories">Category names used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="eventId">Event number or identifier.</param>
            <param name="severity">Log message severity as a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType"/> enumeration. (Unspecified, Information, Warning or Error).</param>
            <param name="title">Additional description of the log entry message</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Write a new log entry to a specific collection of categories with a dictionary of extended properties.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="categories">Category names used to route the log entry to a one or more trace listeners.</param>
            <param name="properties">Dictionary of key/value pairs to log.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Write a new log entry to with a specific collection of categories, priority and a dictionary 
            of extended properties.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="categories">Category names used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="properties">Dictionary of key/value pairs to log.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Write a new log entry with a specific category, priority, event Id, severity
            title and dictionary of extended properties.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="categories">Category names used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="eventId">Event number or identifier.</param>
            <param name="severity">Log message severity as a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType"/> enumeration. (Unspecified, Information, Warning or Error).</param>
            <param name="title">Additional description of the log entry message.</param>
            <param name="properties">Dictionary of key/value pairs to log.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Writes a new log entry as defined in the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> parameter.
            </summary>
            <param name="log">Log entry object to write.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.TraceSources">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> mappings available for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Service.ILogEntryMessageStore">
            <summary>
            Manages the storage and retrieval of log entries.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.ILogEntryMessageStore.Add(Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage)">
            <summary>
            Stores a new entry.
            </summary>
            <param name="entry">The entry to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.ILogEntryMessageStore.RemoveUntil(Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage)">
            <summary>
            Removes several entries from store, from the first entry, until it finds <paramref name="entry"/>. If <paramref name="entry"/> is not found, no entry will be removed.
            </summary>
            <param name="entry">The last entry to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.ILogEntryMessageStore.GetEntries">
            <summary>
            Retrieves all the entries currently stored by the store.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.ILogEntryMessageStore.ResizeBackingStore(System.Int32)">
            <summary>
            Resizes the backing size, trying to preserve all the entries.
            </summary>
            <param name="maxSizeInKilobytes">The maximum size in kilobytes.</param>
            <exception cref="T:System.InvalidOperationException">when the repository is not available.</exception>
            <exception cref="T:System.IO.IOException">when the repository cannot be re-initialized.</exception>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Service.ILogEntryMessageStore.IsWritable">
            <summary>
            Gets a value indicating whether this instance is writable.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Service.ILogEntryMessageStore.Quota">
            <summary>
            Gets the quota allowed for the store.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Service.ILogEntryMessageStore.UsedPhysicalSize">
            <summary>
            Gets an estimate of the physical size used by the store.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Service.ILoggingServiceFactory">
            <summary>
            Factory that creates a transient proxy for accessing the logging service.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.ILoggingServiceFactory.CreateChannel">
            <summary>
            Creates an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Service.ILoggingService"/> channel that is used to send messages to the service.
            </summary>
            <returns>The transient <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Service.ILoggingService"/> created by the factory.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Service.INetworkStatus">
            <summary>
            Provides notifications for when the network status changes.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.INetworkStatus.GetIsNetworkAvailable">
            <summary>
            Indicates whether a network connection is available.
            </summary>
            <remarks>
            A network connection is considered to be available if any network interface is marked "up" and is not a loopback or tunnel interface.
            Many cases in which a computer is not connected to a useful network are still considered available and will return true. 
            For example, a computer connected to a hub or router where the hub or router has lost the upstream connection will return true.
            </remarks>
            <returns><see langword="true"/> if a network connection is available; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Logging.Service.INetworkStatus.NetworkStatusUpdated">
            <summary>
            Notifies that the network status might have changed.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryExtensions">
            <summary>
            Contains extension methods for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryExtensions.ToLogEntryMessage(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Maps a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> to a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage"/>.
            </summary>
            <param name="entry">The log entry to map.</param>
            <returns>The resulting message.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessageStore">
            <summary>
            Represents a log entry message temporary store to buffer messages before sending them to the server. It can use the Isolated Storage
            for persisting entries after a crash or when there is no network connectivity with the server.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessageStore.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessageStore"/>
            </summary>
            <param name="name">The name of the store.</param>
            <param name="maxElementsInBuffer">The maximum amount of elements that will be buffered in memory, for example when there are connectivity issues that prevent the listener from submitting the log entries.</param>
            <param name="maxSizeInKilobytes">The maximum size in kilobytes to be used when storing entries into the isolated storage as a backup strategy.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessageStore.DeleteStore(System.String)">
            <summary>
            Deletes the store with the given name.
            </summary>
            <param name="name">The store name.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessageStore.Add(Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage)">
            <summary>
            Stores a new entry.
            </summary>
            <param name="entry">The entry to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessageStore.RemoveUntil(Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage)">
            <summary>
            Removes several entries from store, from the first entry, until it finds <paramref name="entry"/>. If <paramref name="entry"/> is not found, no entry will be removed.
            </summary>
            <param name="entry">The last entry to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessageStore.GetEntries">
            <summary>
            Retrieves all the entries currently stored by the store.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessageStore.ResizeBackingStore(System.Int32)">
            <summary>
            Resizes the backing size, trying to preserve all the entries.
            </summary>
            <param name="maxSizeInKilobytes">The maximum size in kilobytes.</param>
            <exception cref="T:System.InvalidOperationException">when the repository is not available.</exception>
            <exception cref="T:System.IO.IOException">when the repository cannot be re-initialized.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessageStore.GuardMaxSizeInKilobytes(System.Int32)">
            <summary>
            Checks that the specified max size in kilobytes is valid.
            </summary>
            <param name="maxSizeInKilobytes">The value to check.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessageStore.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessageStore.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"><see langword="true"/> if the method is being called from the <see cref="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessageStore.Dispose"/> method. <see langword="false"/> if it is being called from within the object finalizer.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessageStore.Finalize">
            <summary>
            Releases resources for a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessageStore"/> before garbage collection.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessageStore.IsWritable">
            <summary>
            Gets a value indicating whether this instance is writable.
            </summary>
            <remarks>
            An instance is not writable if another instance of the same application is already using the
            isolated storage with the same name, or if the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessageStore.Quota"/> is zero.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessageStore.Quota">
            <summary>
            Gets the quota allowed for the store.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessageStore.UsedPhysicalSize">
            <summary>
            Gets an estimate of the physical size used by the store.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LoggingServiceFactory">
            <summary>
            Factory that creates a transient WCF <see cref="T:System.ServiceModel.Channels.IChannel"/> for accessing the logging service.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LoggingServiceFactory.CreateChannel">
            <summary>
            Creates an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Service.ILoggingService"/> channel that is used to send messages to the service.
            </summary>
            <returns>The transient <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Service.ILoggingService"/> of type <see cref="T:System.ServiceModel.Channels.IChannel"/> created by the factory.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LoggingServiceFactory.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LoggingServiceFactory.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"><see langword="true"/> if the method is being called from the <see cref="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LoggingServiceFactory.Dispose"/> method. <see langword="false"/> if it is being called from within the object finalizer.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LoggingServiceFactory.Finalize">
            <summary>
            Releases resources for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LoggingServiceFactory"/> instance before garbage collection.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LoggingServiceFactory.EndpointConfigurationName">
            <summary>
            The WCF endpoint configuration name. This configuration must be present in the
            ServiceReferences.ClientConfig file of the main application.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Service.NetworkStatus">
            <summary>
            Provides notifications for when the network status changes, by wrapping the access to <see cref="T:System.Net.NetworkInformation.NetworkChange"/> 
            and <see cref="T:System.Net.NetworkInformation.NetworkInterface"/> classes.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.NetworkStatus.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Service.NetworkStatus"/>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.NetworkStatus.GetIsNetworkAvailable">
            <summary>
            Indicates whether a network connection is available.
            </summary>
            <remarks>
            A network connection is considered to be available if any network interface is marked "up" and is not a loopback or tunnel interface.
            Many cases in which a computer is not connected to a useful network are still considered available and will return true. 
            For example, a computer connected to a hub or router where the hub or router has lost the upstream connection will return true.
            </remarks>
            <returns><see langword="true"/> if a network connection is available; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.NetworkStatus.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.NetworkStatus.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"><see langword="true"/> if the method is being called from the <see cref="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.NetworkStatus.Dispose"/> method. <see langword="false"/> if it is being called from within the object finalizer.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.NetworkStatus.Finalize">
            <summary>
            Releases resources for a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Service.NetworkStatus"/> before garbage collection.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Logging.Service.NetworkStatus.NetworkStatusUpdated">
            <summary>
            Notifies that the network status might have changed.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer">
            <summary>
            Represents a performance tracing class to log method entry/exit and duration.
            </summary>
            <remarks>
            <para>Lifetime of the Tracer object will determine the beginning and the end of
            the trace.  The trace message will include, method being traced, start time, end time 
            and duration.</para>
            <para>Since Tracer uses the Logging Application Block to log the trace message, you can include application
            data as part of your trace message. Configured items from call context will be logged as
            part of the message.</para>
            <para>Trace message will be logged to the log category with the same name as the tracer operation name.
            You must configure the operation categories, or the catch-all categories, with desired log sinks to log 
            the trace messages.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.priority">
            <summary>
            Priority value for Trace messages
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.eventId">
            <summary>
            Event id for Trace messages
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.startTitle">
            <summary>
            Title for operation start Trace messages
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.endTitle">
            <summary>
            Title for operation end Trace messages
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.ActivityIdPropertyKey">
            <summary>
            Name of the entry in the ExtendedProperties having the activity id
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/> class with the given logical operation name.
            </summary>
            <remarks>
            If an existing activity id is already set, it will be kept. Otherwise, a new activity id will be created.
            </remarks>
            <param name="operation">The operation for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/></param>
            <param name="writer">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/> that is used to write trace messages</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.#ctor(System.String,System.Guid,Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/> class with the given logical operation name and activity id.
            </summary>
            <remarks>
            The activity id will override a previous activity id
            </remarks>
            <param name="operation">The operation for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/></param>
            <param name="activityId">The activity id</param>
            <param name="writer">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/> that is used to write trace messages</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.CaptureTracingContext">
            <summary>
            Captures the tracing context on the current thread so tracing can be resumed in a different thread.
            </summary>
            <returns>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.ICapturedTracingContext"/> that can be used to restore the tracing context.</returns>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Logging.ICapturedTracingContext.Restore"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/> class with the given logical operation name.
            </summary>
            <remarks>
            If an existing activity id is already set, it will be kept. Otherwise, a new activity id will be created.
            </remarks>
            <param name="operation">The operation for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/></param>
            <param name="writer">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/> that is used to write trace messages</param>
            <param name="serviceLocator"><see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> used to retrieve the instrumentation provider for this tracer.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.#ctor(System.String,System.Guid,Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/> class with the given logical operation name and activity id.
            </summary>
            <remarks>
            The activity id will override a previous activity id
            </remarks>
            <param name="operation">The operation for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/></param>
            <param name="activityId">The activity id</param>
            <param name="writer">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/> that is used to write trace messages</param>
            <param name="serviceLocator"><see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> used to retrieve the instrumentation provider for this tracer.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.#ctor(System.String,System.Guid,Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter,Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ITracerInstrumentationProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/> class with the given logical operation name and activity id.
            </summary>
            <remarks>
            This is meant to be used internally
            </remarks>
            <param name="operation">The operation for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/></param>
            <param name="activityId">The activity id</param>
            <param name="writer">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/> that is used to write trace messages</param>
            <param name="instrumentationProvider">Instrumentation provider to use for firing logical instrumentation events from Tracer.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter,Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ITracerInstrumentationProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/> class with the given logical operation name and activity id.
            </summary>
            <remarks>
            This is meant to be used internally
            </remarks>
            <param name="operation">The operation for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/></param>
            <param name="writer">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/> that is used to write trace messages</param>
            <param name="instrumentationProvider">Instrumentation provider to use for firing logical instrumentation events from Tracer.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.Dispose">
            <summary>
            Causes the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/> to output its closing message.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.IsTracingEnabled">
            <summary>
            Answers whether tracing is enabled
            </summary>
            <returns>true if tracing is enabled</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.ICapturedTracingContext">
            <summary>
            Represents captured tracing context so tracing can be resumed in a different thread.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.ICapturedTracingContext.Restore">
            <summary>
            Restores the tracing context captured by this object.
            </summary>
            <returns>An <see cref="T:System.IDisposable"/> implementation that will clear the restored tracing context on 
            <see cref="M:System.IDisposable.Dispose"/>.</returns>
            <exception cref="T:System.InvalidOperationException">when the method is invoked a second time on the same instance.</exception>
            <remarks>
            If <see cref="M:System.IDisposable.Dispose"/> is not invoked on the return value of this method, the restored
            tracing context will not be cleared.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.DefaultTraceListener">
            <summary>
            Default trace listener, with no implementation.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener">
            <summary>
            Provides the abstract base class for the listeners who monitor trace and debug output.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener.Flush">
            <summary>
            When overridden in a derived class, flushes the output buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener.TraceData(Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventCache,System.String,Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Writes trace information, a data object and event information to the listener specific output.
            </summary>
            <param name="traceEventCache">A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventCache"/> object that contains context information.</param>
            <param name="source">A name used to identify the output.</param>
            <param name="eventType">One of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener.Write(System.String)">
            <summary>
            Writes the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener.WriteLine(System.String)">
            <summary>
            Writes the specified message, followed by a line terminator.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener.GetUpdateContext">
            <summary>
            Provides an update context to batch change requests to the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener"/> configuration.
            </summary>
            <returns>Returns an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.ITraceListenerUpdateContext"/> instance that can be used to apply the configuration changes.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener.Finalize">
            <summary>
            Finalizer for TraceListener
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener.Dispose">
            <summary>
            Dispose method for all backing stores. This implementation is sufficient for any class that does not need any finalizer behavior
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"><see langword="true"/> if the method is being called from the <see cref="M:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener.Dispose"/> method. <see langword="false"/> if it is being called from within the object finalizer.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener.IsThreadSafe">
            <summary>
            Gets a value indicating whether this instance is thread safe.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener.Name">
            <summary>
            Gets or sets the name for the trace listener.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener.TraceListenerUpdateContext">
            <summary>
            Provides an update context for changing the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener.TraceListenerUpdateContext.TraceListener"/> settings.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener.TraceListenerUpdateContext.#ctor(Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener.TraceListenerUpdateContext"/>.
            </summary>
            <param name="traceListener">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener.TraceListenerUpdateContext.TraceListener"/> being configured.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener.TraceListenerUpdateContext.ApplyChanges">
            <summary>
            Applies the changes.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener.TraceListenerUpdateContext.Name">
            <summary>
            Gets the name for the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener.TraceListenerUpdateContext.TraceListener"/> instance being configured.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener.TraceListenerUpdateContext.TraceListener">
            <summary>
            Gets the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener.TraceListenerUpdateContext.TraceListener"/> being configured.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.DefaultTraceListener.Write(System.String)">
            <summary>
            Writes the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.DefaultTraceListener.WriteLine(System.String)">
            <summary>
            Writes the specified message, followed by a line terminator.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.SourceLevels">
            <summary>
            Specifies the levels of trace messages filtered for sources.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.SourceLevels.Off">
            <summary>
            Does not allow any events through.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.SourceLevels.Critical">
            <summary>
            Allows only Critical events through.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.SourceLevels.Error">
            <summary>
            Allows Critical and Error events through.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.SourceLevels.Warning">
            <summary>
            Allows Critical, Error, and Warning events through.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.SourceLevels.Information">
            <summary>
            Allows Critical, Error, Warning, and Information events through.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.SourceLevels.Verbose">
            <summary>
            Allows Critical, Error, Warning, Information, and Verbose events through.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.SourceLevels.ActivityTracing">
            <summary>
            Allows the Stop and Start events through.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.SourceLevels.All">
            <summary>
            Allows all events through.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.Stopwatch">
            <summary>
            Provides a set of methods and properties that you can use to measure elapsed time. 
            </summary>
            <remarks>
            This implementation relies on the lower-resolution <see cref="T:System.DateTime"/> class.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.Stopwatch.StartNew">
            <summary>
            Initializes a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.Stopwatch"/> instance, sets the elapsed time property to zero, and starts 
            measuring elapsed time.
            </summary>
            <returns>The new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.Stopwatch"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.Stopwatch.GetTimestamp">
            <summary>
            Gets the current number of ticks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.Stopwatch.Start">
            <summary>
            Starts, or resumes, measuring elapsed time for an interval.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.Stopwatch.Stop">
            <summary>
            Stops measuring elapsed time for an interval.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.Stopwatch.ElapsedMilliseconds">
            <summary>
            Gets the milliseconds elapsed for the stopwatch.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.Stopwatch.Elapsed">
            <summary>
            Gets the elapsed time for the stopwatch.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventCache">
            <summary>
            Provides context information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventCache.Callstack">
            <summary>
            Gets the call stack for the current thread.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventCache.DateTime">
            <summary>
            Gets the date and time at which the event trace occurred.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventCache.ThreadId">
            <summary>
            Gets a unique identifier for the current managed thread. 
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType">
            <summary>
            Identifies the type of event that has caused the trace.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType.Critical">
            <summary>
            Fatal error or application crash.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType.Error">
            <summary>
            Recoverable error.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType.Warning">
            <summary>
            Noncritical problem.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType.Information">
            <summary>
            Informational message.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType.Verbose">
            <summary>
            Debugging trace.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType.Start">
            <summary>
            Starting of a logical operation.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType.Stop">
            <summary>
            Suspension of a logical operation.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.ExceptionFormatter">
            <summary>
            <para>Provides exception formatting when not using the Exception Handling Application Block.</para>
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Logging.ExceptionFormatter.Header">
            <summary>
            Name of the additional information entry that holds the header.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.ExceptionFormatter.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.ExceptionFormatter"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.ExceptionFormatter.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.ExceptionFormatter"/> class with the additional information and the application name.</para>
            </summary>
            <param name="additionalInfo">
            <para>The additional information to log.</para>
            </param>
            <param name="applicationName">
            <para>The application name.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.ExceptionFormatter.GetMessage(System.Exception)">
            <summary>
            <para>Get the formatted message to be logged.</para>
            </summary>
            <param name="exception"><para>The exception object whose information should be written to log file.</para></param>
            <returns><para>The formatted message.</para></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.ExceptionFormatter.CollectAdditionalInfo">
            <devdoc>
            Add additional 'environment' information. 
            </devdoc>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter">
            <summary>
            Represents a client-side log filter based on message category.  
            Either specific categories can be explicitly allowed, or specific categories can be denied.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilter">
            <summary>
            Abstract implementation of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter"/> interface.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter">
            <summary>
            Represents the interface for client-side message filters.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter.Filter(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Test to see if a message meets the criteria to be processed. 
            </summary>
            <param name="log">Log entry to test.</param>
            <returns><b>true</b> if the message passes through the filter and should be distributed, <b>false</b> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter.Name">
            <summary>
            Gets the name of the log filter
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilter"/>.
            </summary>
            <param name="name">The name for the log filter.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilter.Filter(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Test to see if a message meets the criteria to be processed. 
            </summary>
            <param name="log">Log entry to test.</param>
            <returns><b>true</b> if the message passes through the filter and should be logged, <b>false</b> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilter.Name">
            <summary>
            Gets the name of the log filter
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter.#ctor(System.String,System.Collections.Generic.ICollection{System.String},Microsoft.Practices.EnterpriseLibrary.Logging.CategoryFilterMode)">
            <summary>
            Initializes a new instance with configuration data.
            </summary>
            <param name="name">Name of this category filter.</param>
            <param name="categoryFilters">Categories to be included in the filter.</param>
            <param name="categoryFilterMode"><see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter.CategoryFilterMode"/> used to include or exclude category filters.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter.Filter(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Tests a log entry against the category filters.
            </summary>
            <param name="log">Log entry to test.</param>
            <returns><b>true</b> if the message passes through the filter and should be logged, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter.ShouldLog(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Tests a set of categories against the category filters.
            </summary>
            <param name="categories">The set of categories.</param>
            <returns><b>true</b> if the message passes through the filter and should be logged, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter.ShouldLog(System.String)">
            <summary>
            Test a category against the category filters.
            </summary>
            <param name="category">The category.</param>
            <returns><b>true</b> if the category passes through the category filter, <b>false</b> otherwise.</returns>
            <remarks>A log entry for an allowed category may be rejected if the log entry has other denied categories
            in its categories list.</remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter.CategoryFilters">
            <summary>
            Gets the category names to filter.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter.CategoryFilterMode">
            <summary>
            Gets the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter.CategoryFilterMode"/> to use for filtering.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilterErrorHandler">
            <summary>
            Contract for handling errors during evaluation of an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilterErrorHandler.FilterCheckingFailed(System.Exception,Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry,Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter)">
            <summary>
            Perform any action to handle an error during checking.
            </summary>
            <param name="ex">The exception raised during filter evaluation.</param>
            <param name="logEntry">The log entry being evaluated.</param>
            <param name="filter">The filter that raised the exception.</param>
            <returns>True if processing should continue, ignoring the failed filter, or 
            false if the filter evaluation should be considered as failed.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogEnabledFilter">
            <summary>
            Represents a Boolean on/off filter.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogEnabledFilter.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogEnabledFilter"/>.
            </summary>
            <param name="name">The name of the filter.</param>
            <param name="enabled">True if the filter allows messages, false otherwise.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogEnabledFilter.Filter(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Tests to see if a message meets the criteria to be processed. 
            </summary>
            <param name="log">Log entry to test.</param>
            <returns><b>true</b> if the message passes through the filter and should be logged, <b>false</b> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogEnabledFilter.Enabled">
            <summary>
            Gets or set the Boolean flag for the filter.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilterHelper">
            <summary>
            Provides client-side log filtering based on category and priority.  Each filter
            implements the ILogFilter interface and is registered in this class.
            Category filtering is done using a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter"/> and priority filtering
            is done using a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilterHelper.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter},Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilterErrorHandler)">
            <summary>
            Initialize a new instance of a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilterHelper"/> class.  Registers each ILogFilter.
            </summary>
            <param name="filters">The instances of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter"/> to aggregate.</param>
            <param name="handler">The handler to deal with errors during filter checking.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilterHelper.CheckFilters(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Tests the log message against the registered filters.
            </summary>
            <param name="log">Log entry message.</param>
            <returns>Return <b>true</b> if the message passes through all of the filters.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilterHelper.GetFilter``1">
            <summary>
            Gets the first filter of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the filter to get.</typeparam>
            <returns>The first filter of type <typeparamref name="T"/>, 
            or <see langword="null"/> if there is no such filter.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilterHelper.GetFilter``1(System.String)">
            <summary>
            Gets the filter of type <typeparamref name="T"/> named <paramref name="name"/>.
            </summary>
            <typeparam name="T">The type of the filter to get.</typeparam>
            <param name="name">The name of the filter to get.</param>
            <returns>The filter of type <typeparamref name="T"/> named <paramref name="name"/>, 
            or <see langword="null"/> if there is no such filter</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilterHelper.GetFilter(System.String)">
            <summary>
            Gets the filter named <paramref name="name"/>.
            </summary>
            <param name="name">The name of the filter to get.</param>
            <returns>The filter named <paramref name="name"/>, 
            or <see langword="null"/> if there is no such filter</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter">
            <summary>
            Represents a client-side log filter based on message priority. 
            Messages with priorities between the minimum and maximum values are allowed to be processed, all other messages are dropped.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter"/> class with a minimum priority and no maximum priority.
            </summary>
            <param name="name">The name of the instance.</param>
            <param name="minimumPriority">The minimum priority value.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter"/> class with a minimum and maximum priority.
            </summary>
            <param name="name">The name of the instance.</param>
            <param name="minimumPriority">The minimum priority value.</param>
            <param name="maximumPriority">The maximum priority value.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter.Filter(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Tests a log entry to see if its priority is within the allowed limits.
            </summary>
            <param name="log">Log entry to test.</param>
            <returns>Returns true if the log entry passes through the category filter.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter.ShouldLog(System.Int32)">
            <summary>
            Tests a log entry to see if its priority is within the allowed limits.
            </summary>
            <param name="priority">Priority to test.</param>
            <returns>Returns true if the priority passes through the category filter.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter.MinimumPriority">
            <summary>
            The minimum value for messages to be processed.  Messages with a priority
            below the minimum are dropped immediately on the client.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter.MaximumPriority">
            <summary>
            The maximum value for messages to be processed. If not specified
            this property defaults to Int32.MaxInt
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ILoggingInstrumentationProvider">
            <summary/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ILoggingInstrumentationProvider.FireLockAcquisitionError(System.String)">
            <summary/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ILoggingInstrumentationProvider.FireConfigurationFailureEvent(System.Exception)">
            <summary/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ILoggingInstrumentationProvider.FireFailureLoggingErrorEvent(System.String,System.Exception)">
            <summary/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ILoggingInstrumentationProvider.FireLogEventRaised">
            <summary/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ILoggingInstrumentationProvider.FireTraceListenerEntryWrittenEvent">
            <summary/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ILoggingInstrumentationProvider.FireReconfigurationErrorEvent(System.Exception)">
            <summary/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ITracerInstrumentationProvider">
            <summary/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ITracerInstrumentationProvider.FireTraceOperationEnded(System.String,System.Int64)">
            <summary/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ITracerInstrumentationProvider.FireTraceOperationStarted(System.String)">
            <summary/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.NullLoggingInstrumentationProvider">
            <summary/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.NullLoggingInstrumentationProvider.FireLockAcquisitionError(System.String)">
            <summary/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.NullLoggingInstrumentationProvider.FireConfigurationFailureEvent(System.Exception)">
            <summary/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.NullLoggingInstrumentationProvider.FireFailureLoggingErrorEvent(System.String,System.Exception)">
            <summary/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.NullLoggingInstrumentationProvider.FireLogEventRaised">
            <summary/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.NullLoggingInstrumentationProvider.FireTraceListenerEntryWrittenEvent">
            <summary/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.NullLoggingInstrumentationProvider.FireReconfigurationErrorEvent(System.Exception)">
            <summary/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.NullTracerInstrumentationProvider">
            <summary/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.NullTracerInstrumentationProvider.FireTraceOperationEnded(System.String,System.Int64)">
            <summary/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.NullTracerInstrumentationProvider.FireTraceOperationStarted(System.String)">
            <summary/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl">
            <summary>
            Instance based class to write log messages based on a given configuration.
            Messages are routed based on category.
            </summary>
            <remarks>
            <para>
            The LogWriterImpl works as an entry point to the <see cref="N:System.Diagnostics"/> trace listeners. 
            It will trace the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> through the <see cref="N:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners"/>s associated with the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>s 
            for all the matching categories in the elements of the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.Categories"/> property of the log entry. 
            If the "all events" special log source is configured, the log entry will be traced through the log source regardless of other categories 
            that might have matched.
            If the "all events" special log source is not configured and the "unprocessed categories" special log source is configured,
            and the category specified in the logEntry being logged is not defined, then the logEntry will be logged to the "unprocessed categories"
            special log source.
            If both the "all events" and "unprocessed categories" special log sources are not configured and the property LogWarningsWhenNoCategoriesMatch
            is set to true, then the logEntry is logged to the "logging errors and warnings" special log source.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.#ctor(Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder,Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ILoggingInstrumentationProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl"/> class.
            </summary>
            <param name="structureHolder">The initial implementation of the logging stack</param>
            <param name="instrumentationProvider">The instrumentation provider to use.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.DoGetMatchingTraceSources(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Returns the collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>s that matches the collection of categories provided.
            </summary>
            <param name="logEntry">The log entry.</param>
            <returns>The matching <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>s</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.FilterCheckingFailed(System.Exception,Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry,Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Performs any action to handle an error during checking.
            </summary>
            <param name="ex">The exception raised during filter evaluation.</param>
            <param name="logEntry">The log entry being evaluated.</param>
            <param name="filter">The filter that raised the exception.</param>
            <returns>True signaling processing should continue.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.GetFilter``1">
            <summary>
            Returns the filter of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of filter required.</typeparam>
            <returns>The instance of <typeparamref name="T"/> in the filters collection, or <see langword="null"/> 
            if there is no such instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.GetFilter``1(System.String)">
            <summary>
            Returns the filter of type <typeparamref name="T"/> named <paramref name="name"/>.
            </summary>
            <typeparam name="T">The type of filter required.</typeparam>
            <param name="name">The name of the filter required.</param>
            <returns>The instance of <typeparamref name="T"/> named <paramref name="name"/> in 
            the filters collection, or <see langword="null"/> if there is no such instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.GetFilter(System.String)">
            <summary>
            Returns the filter named <paramref name="name"/>.
            </summary>
            <param name="name">The name of the filter required.</param>
            <returns>The filter named <paramref name="name"/> in 
            the filters collection, or <see langword="null"/> if there is no such filter.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.GetMatchingTraceSources(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Gets a list of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> objects for the log entry.
            </summary>
            <param name="logEntry">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> to get the matching trace sources.</param>
            <returns>A collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> objects.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.IsLoggingEnabled">
            <summary>
            Queries whether logging is enabled.
            </summary>
            <returns><b>true</b> if logging is enabled.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.IsTracingEnabled">
            <summary>
            Queries whether tracing is enabled.
            </summary>
            <returns><b>true</b> if tracing is enabled.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.ShouldLog(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Queries whether a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> should be logged.
            </summary>
            <param name="log">The log entry to check.</param>
            <returns><b>true</b> if the entry should be logged.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.Write(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Writes a new log entry as defined in the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> parameter.
            </summary>
            <param name="log">Log entry object to write.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter},System.Collections.Generic.IDictionary{System.String,Microsoft.Practices.EnterpriseLibrary.Logging.LogSource},Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl"/> class.
            </summary>
            <param name="filters">The collection of filters to use when processing an entry.</param>
            <param name="traceSources">The trace sources to dispatch entries to.</param>
            <param name="errorsTraceSource">The special <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which internal errors must be logged.</param>
            <param name="defaultCategory">The default category to set when entry categories list is empty.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter},System.Collections.Generic.IDictionary{System.String,Microsoft.Practices.EnterpriseLibrary.Logging.LogSource},Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,System.String,Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ILoggingInstrumentationProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl"/> class.
            </summary>
            <param name="filters">The collection of filters to use when processing an entry.</param>
            <param name="traceSources">The trace sources to dispatch entries to.</param>
            <param name="errorsTraceSource">The special <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which internal errors must be logged.</param>
            <param name="defaultCategory">The default category to set when entry categories list is empty.</param>
            <param name="instrumentationProvider">The instrumentation provider to use.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter},System.Collections.Generic.IDictionary{System.String,Microsoft.Practices.EnterpriseLibrary.Logging.LogSource},Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl"/> class.
            </summary>
            <param name="filters">The collection of filters to use when processing an entry.</param>
            <param name="traceSources">The trace sources to dispatch entries to.</param>
            <param name="allEventsTraceSource">The special <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which all log entries should be logged.</param>
            <param name="notProcessedTraceSource">The special <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which log entries with at least one non-matching category should be logged.</param>
            <param name="errorsTraceSource">The special <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which internal errors must be logged.</param>
            <param name="defaultCategory">The default category to set when entry categories list of a log entry is empty.</param>
            <param name="tracingEnabled">The tracing status.</param>
            <param name="logWarningsWhenNoCategoriesMatch">true if warnings should be logged when a non-matching category is found.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter},System.Collections.Generic.IDictionary{System.String,Microsoft.Practices.EnterpriseLibrary.Logging.LogSource},Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl"/> class.
            </summary>
            <param name="filters">The collection of filters to use when processing an entry.</param>
            <param name="traceSources">The trace sources to dispatch entries to.</param>
            <param name="allEventsTraceSource">The special <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which all log entries should be logged.</param>
            <param name="notProcessedTraceSource">The special <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which log entries with at least one non-matching category should be logged.</param>
            <param name="errorsTraceSource">The special <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which internal errors must be logged.</param>
            <param name="defaultCategory">The default category to set when entry categories list of a log entry is empty.</param>
            <param name="tracingEnabled">The tracing status.</param>
            <param name="logWarningsWhenNoCategoriesMatch">true if warnings should be logged when a non-matching category is found.</param>
            <param name="revertImpersonation">true if impersonation should be reverted while logging.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter},System.Collections.Generic.IDictionary{System.String,Microsoft.Practices.EnterpriseLibrary.Logging.LogSource},Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,System.String,System.Boolean,System.Boolean,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ILoggingInstrumentationProvider,Microsoft.Practices.EnterpriseLibrary.Logging.IAsyncTracingErrorReporter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl"/> class.
            </summary>
            <param name="filters">The collection of filters to use when processing an entry.</param>
            <param name="traceSources">The trace sources to dispatch entries to.</param>
            <param name="allEventsTraceSource">The special <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which all log entries should be logged.</param>
            <param name="notProcessedTraceSource">The special <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which log entries with at least one non-matching category should be logged.</param>
            <param name="errorsTraceSource">The special <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which internal errors must be logged.</param>
            <param name="defaultCategory">The default category to set when entry categories list of a log entry is empty.</param>
            <param name="tracingEnabled">The tracing status.</param>
            <param name="logWarningsWhenNoCategoriesMatch">true if warnings should be logged when a non-matching category is found.</param>
            <param name="revertImpersonation">true if impersonation should be reverted while logging.</param>
            <param name="instrumentationProvider">The instrumentation provider to use.</param>
            <param name="asyncTracingErrorReporter">The async tracing error reporter.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter},System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Logging.LogSource},Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl"/> class.
            </summary>
            <param name="filters">The collection of filters to use when processing an entry.</param>
            <param name="traceSources">The trace sources to dispatch entries to.</param>
            <param name="errorsTraceSource">The special <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which internal errors must be logged.</param>
            <param name="defaultCategory">The default category to set when entry categories list is empty.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter},System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Logging.LogSource},Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl"/> class.
            </summary>
            <param name="filters">The collection of filters to use when processing an entry.</param>
            <param name="traceSources">The trace sources to dispatch entries to.</param>
            <param name="allEventsTraceSource">The special <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which all log entries should be logged.</param>
            <param name="notProcessedTraceSource">The special <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which log entries with at least one non-matching category should be logged.</param>
            <param name="errorsTraceSource">The special <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which internal errors must be logged.</param>
            <param name="defaultCategory">The default category to set when entry categories list is empty.</param>
            <param name="tracingEnabled">The tracing status.</param>
            <param name="logWarningsWhenNoCategoriesMatch">true if warnings should be logged when a non-matching category is found.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter},System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Logging.LogSource},Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,System.String,System.Boolean,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ILoggingInstrumentationProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl"/> class.
            </summary>
            <param name="filters">The collection of filters to use when processing an entry.</param>
            <param name="traceSources">The trace sources to dispatch entries to.</param>
            <param name="allEventsTraceSource">The special <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which all log entries should be logged.</param>
            <param name="notProcessedTraceSource">The special <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which log entries with at least one non-matching category should be logged.</param>
            <param name="errorsTraceSource">The special <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which internal errors must be logged.</param>
            <param name="defaultCategory">The default category to set when entry categories list is empty.</param>
            <param name="tracingEnabled">The tracing status.</param>
            <param name="logWarningsWhenNoCategoriesMatch">true if warnings should be logged when a non-matching category is found.</param>
            <param name="instrumentationProvider">The instrumentation provider to use.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.#ctor(Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder,Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ILoggingInstrumentationProvider,Microsoft.Practices.EnterpriseLibrary.Logging.IAsyncTracingErrorReporter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl"/> class.
            </summary>
            <param name="structureHolder">The initial implementation of the logging stack</param>
            <param name="instrumentationProvider">The instrumentation provider to use.</param>
            <param name="asyncTracingErrorReporter">The async tracing error reporter.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.StartTrace(System.String)">
            <summary>
            Starts a new tracing operation.
            </summary>
            <param name="operation">The operation id.</param>
            <returns>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/> representing the tracing operation.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.StartTrace(System.String,System.Guid)">
            <summary>
            Starts a new tracing operation.
            </summary>
            <param name="operation">The operation id.</param>
            <param name="activityId">The activity id.</param>
            <returns>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/> representing the tracing operation.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.SetTracingEnabled(System.Boolean)">
            <summary>
            Sets the tracing status.
            </summary>
            <param name="enabled">The new status.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.GetUpdateContext">
            <summary>
            Provides an update context to batch change requests to the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl"/> configuration,
            and apply all the changes in a single call <see cref="M:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.ILogWriterUpdateContext.ApplyChanges"/>.
            </summary>
            <returns>Returns an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.ILogWriterUpdateContext"/> instance that can be used to apply the configuration changes.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.GetTraceListeners">
            <summary>
            Gets all the available <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener"/>s in the application.
            </summary>
            <returns>A collection of all the available <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener"/>s in the application.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/>.
            </summary>
            <param name="disposing"><see langword="true"/> when disposing, <see langword="false"/> otherwise.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.TraceSources">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> mappings available for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.LogWriterUpdateContext">
            <summary>
            Provides an update context for changing the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl"/> settings.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.LogWriterUpdateContext.#ctor(Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.LogWriterUpdateContext"/>.
            </summary>
            <param name="logWriter">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl"/> being configured.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.LogWriterUpdateContext.ApplyChanges">
            <summary>
            Commits the changes.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.LogWriterUpdateContext.Categories">
            <summary>
            Gets the update contexts for all the configured categories.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.LogWriterUpdateContext.IsLoggingEnabled">
            <summary>
            Gets or sets if logging is enabled.
            </summary>
            <returns><see langword="true"/> if logging is enabled.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.LogWriterUpdateContext.LogWriter">
            <summary>
            The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl"/> being configured.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.LogWriterUpdateContext.Listeners">
            <summary>
            Gets the update contexts for all the configured <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener"/>s.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.LogWriterUpdateContext.AllEventsCategory">
            <summary>
            Gets the update context for configured 'All Events' special category.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.LogWriterUpdateContext.NotProcessedCategory">
            <summary>
            Gets the update context for configured 'Not Processed' special category.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.LogWriterUpdateContext.ErrorsCategory">
            <summary>
            Gets the update context for configured 'Errors' special category.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder">
            <summary>
            This type supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Holds the collaborators of a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/> to allow for an easy replacement should configuration change.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter},System.Collections.Generic.IDictionary{System.String,Microsoft.Practices.EnterpriseLibrary.Logging.LogSource},Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder"/> class.
            </summary>
            <param name="filters">The collection of filters to use when processing an entry.</param>
            <param name="traceSources">The trace sources to dispatch entries to.</param>
            <param name="allEventsTraceSource">The special <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which all log entries should be logged.</param>
            <param name="notProcessedTraceSource">The special <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which log entries with at least one non-matching category should be logged.</param>
            <param name="errorsTraceSource">The special <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which internal errors must be logged.</param>
            <param name="defaultCategory">The default category to set when entry categories list of a log entry is empty.</param>
            <param name="tracingEnabled">The tracing status.</param>
            <param name="logWarningsWhenNoCategoriesMatch">true if warnings should be logged when a non-matching category is found.</param>
            <param name="revertImpersonation">true if impersonation should be reverted while logging.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Logging.LogSource},Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This constructor supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder"/> class.
            </summary>
            <param name="filters">The collection of filters to use when processing an entry.</param>
            <param name="traceSourceNames">Names of the trace sources to dispatch entries to.</param>
            <param name="traceSources">The trace sources to dispatch entries to.</param>
            <param name="allEventsTraceSource">The special <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which all log entries should be logged.</param>
            <param name="notProcessedTraceSource">The special <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which log entries with at least one non-matching category should be logged.</param>
            <param name="errorsTraceSource">The special <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which internal errors must be logged.</param>
            <param name="defaultCategory">The default category to set when entry categories list of a log entry is empty.</param>
            <param name="tracingEnabled">The tracing status.</param>
            <param name="logWarningsWhenNoCategoriesMatch">true if warnings should be logged when a non-matching category is found.</param>
            <param name="revertImpersonation">true if impersonation should be reverted while logging.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder.Dispose">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Releases the resources used by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"><see langword="true"/> if the method is being called from the <see cref="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder.Dispose"/> method. <see langword="false"/> if it is being called from within the object finalizer.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder.Finalize">
            <summary>
            Releases resources for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder"/> instance before garbage collection.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder.Filters">
            <summary>
            This property supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder.TraceSources">
            <summary>
            This property supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder.AllEventsTraceSource">
            <summary>
            This property supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder.NotProcessedTraceSource">
            <summary>
            This property supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder.ErrorsTraceSource">
            <summary>
            This property supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder.DefaultCategory">
            <summary>
            This property supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder.TracingEnabled">
            <summary>
            This property supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder.LogWarningsWhenNoCategoriesMatch">
            <summary>
            This property supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder.RevertImpersonation">
            <summary>
            This property supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.CategoryFormatter">
            <summary>
            A formatter object that allows for replacement of tokens in
            a log handler category string.
            </summary>
            <remarks>This class supports the following replacements:
            <list>
            <item><term>{method}</term><description>Target method name.</description></item>
            <item><term>{type}</term><description>Target method's implementing type.</description></item>
            <item><term>{namespace}</term><description>Namespace containing target's type.</description></item>
            <item><term>{assembly}</term><description>Assembly containing target's type.</description></item>
            </list></remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.CategoryFormatter.#ctor(System.Reflection.MethodBase)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.CategoryFormatter"/> using information from the
            given method.
            </summary>
            <param name="method">Method used to generate the category replacements.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.CategoryFormatter.FormatCategory(System.String)">
            <summary>
            Perform the formatting operation, replacing tokens in the template.
            </summary>
            <param name="template">Template string to do token replacement in.</param>
            <returns>The template, with tokens replaced.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerAttribute">
            <summary>
            An attribute to apply the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler"/> to the target type, property or method.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerAttribute.CreateHandler(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Creates the log handler for the target using the configured values.
            </summary>
            <returns>the created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerAttribute.Categories">
            <summary>
            Gets or sets the collection of categories to place the log entries into.
            </summary>
            <remarks>The category strings can include replacement tokens. See
            the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.CategoryFormatter"/> class for the list of tokens.</remarks>
            <value>The list of category strings.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerAttribute.EventId">
            <summary>
            Event ID to include in log entry.
            </summary>
            <value>event id</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerAttribute.LogBeforeCall">
            <summary>
            Should there be a log entry before calling the target?
            </summary>
            <value>true = yes, false = no</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerAttribute.LogAfterCall">
            <summary>
            Should there be a log entry after calling the target?
            </summary>
            <value>true = yes, false = no</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerAttribute.BeforeMessage">
            <summary>
            Message to include in a pre-call log entry.
            </summary>
            <value>The message</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerAttribute.AfterMessage">
            <summary>
            Message to include in a post-call log entry.
            </summary>
            <value>the message.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerAttribute.IncludeParameters">
            <summary>
            Should the log entry include the parameters to the call?
            </summary>
            <value>true = yes, false = no</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerAttribute.IncludeCallStack">
            <summary>
            Should the log entry include the call stack?
            </summary>
            <remarks>Logging the call stack requires full trust code access security permissions.</remarks>
            <value>true = yes, false = no</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerAttribute.IncludeCallTime">
            <summary>
            Should the log entry include the time to execute the target?
            </summary>
            <value>true = yes, false = no</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerAttribute.Priority">
            <summary>
            Priority for the log entry.
            </summary>
            <value>priority</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerAttribute.Severity">
            <summary>
            Severity to log at.
            </summary>
            <value><see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType"/> giving the severity.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.AllEventsTraceSourceName">
            <summary>
              Looks up a localized string similar to All Events.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.DefaultLogEntryTitle">
            <summary>
              Looks up a localized string similar to Call Logging.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.DefaultTextFormatShort">
            <summary>
              Looks up a localized string similar to Timestamp: {timestamp}{newline}Message: {message}{newline}Category: {category}{newline}Priority: {priority}{newline}EventId: {eventid}{newline}Severity: {severity}{newline}Title:{title}{newline}App Domain: {localAppDomain}{newline}Thread Name: {threadName}{newline}Extended Properties: {dictionary({key} - {value}{newline})}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.DistributorEventLoggerDefaultApplicationName">
            <summary>
              Looks up a localized string similar to Enterprise Library Distributor Service.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ErrorCannotReadIntegerFromStream">
            <summary>
              Looks up a localized string similar to Cannot read value for stream parameter {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ErrorCanOnlyRestoreTracingContextOnce">
            <summary>
              Looks up a localized string similar to Captured tracing context can only be restored once..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ErrorEntryDataInDiskIsInvalidLongerThanMaximum">
            <summary>
              Looks up a localized string similar to Invalid entry data found in stream: the size of the entry at position {0} is larger than the available size..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ErrorEntryDataInDiskIsInvalidNegativeSize">
            <summary>
              Looks up a localized string similar to Invalid entry data found in stream: entry has negative size at position {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ErrorEntryIsLargerThanTheEffectiveMaximumSize">
            <summary>
              Looks up a localized string similar to The entry is larger than the effective available space..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ErrorHeaderMismatch">
            <summary>
              Looks up a localized string similar to Header mismatch found for header &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ErrorInvalidStreamParameter">
            <summary>
              Looks up a localized string similar to Invalid stream parameter {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ErrorLoggingServiceFactoryNotSet">
            <summary>
              Looks up a localized string similar to Logging service factory is required for the listener &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ErrorRepositoryFileAlreadyExists">
            <summary>
              Looks up a localized string similar to The repository file already exists..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ErrorRepositoryIsNotAvailable">
            <summary>
              Looks up a localized string similar to The repository is not available. The most likely cause is that the repository file is already being used by another instance..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ErrorRepositoryNameNotSet">
            <summary>
              Looks up a localized string similar to The repository name was not set for listener {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ErrorsTraceSourceName">
            <summary>
              Looks up a localized string similar to Logging Errors &amp; Warnings.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ErrorSubmitIntervalInvalidRange">
            <summary>
              Looks up a localized string similar to The submit interval is less than 0 for the listener &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionCreationLinqExpressionMustBeNew">
            <summary>
              Looks up a localized string similar to The creation expression for this type registration must be a Linq New or MemberInit Expression..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionDetails">
            <summary>
              Looks up a localized string similar to Exception Information Details:.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionFormatterHeader">
            <summary>
              Looks up a localized string similar to HEADER.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionNullOrEmptyString">
            <summary>
              Looks up a localized string similar to The value cannot be a null or empty string..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionStackTraceDetails">
            <summary>
              Looks up a localized string similar to StackTrace Information Details:.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionSummary">
            <summary>
              Looks up a localized string similar to Summary for.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionType">
            <summary>
              Looks up a localized string similar to Exception Type.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionWriterShouldNotBeNull">
            <summary>
              Looks up a localized string similar to The writer argument should not be null when passing a configurationsource for instrumentation..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.FailureWhileCheckingFilters">
            <summary>
              Looks up a localized string similar to Failure while checking filters for log entry..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.FailureWhileReportingMissingCategories">
            <summary>
              Looks up a localized string similar to Failure while reporting missing log categories for log entry..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.FailureWhileTracing">
            <summary>
              Looks up a localized string similar to Failure while sending log entry to the TraceListeners..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.FilterEvaluationFailed">
            <summary>
              Looks up a localized string similar to Evaluation of filter &apos;{0}&apos; failed and the filter will be ignored. See summary information below for more information. Should this problem persist, stop the service and check the configuration file(s) for possible error(s) in the configuration of the categories and sinks..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.FilterEvaluationFailed2">
            <summary>
              Looks up a localized string similar to ProcessQueueMessage - additional information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.FilterEvaluationFailed3">
             <summary>
               Looks up a localized string similar to 
            Message: 
            {0}.
             </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.IntrinsicPropertyError">
            <summary>
              Looks up a localized string similar to Unable to read intrinsic property.  Error message: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.LogEntry_SimplifiedToString">
             <summary>
               Looks up a localized string similar to Timestamp: {0}
            Message: {1}
            Category: {2}
            Severity: {3}.
             </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.LogEntryMessageStoreMaxSizeMustBeEitherZeroOrLargerThanZero">
            <summary>
              Looks up a localized string similar to The value must be either 0, or larger than {0} KB..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.LoggingServiceFactory_EndpointConfigurationNameNotSet">
            <summary>
              Looks up a localized string similar to LoggingServiceFactory is not correctly initialized. EndpointConfigurationName must be set prior to usage..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.LogWriterUpdateContext_IsNotCurrent">
            <summary>
              Looks up a localized string similar to The instance of ILogWriterUpdateContext used to apply changes is not current..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.MaxSizeInKilobytesCannotBeChanged">
            <summary>
              Looks up a localized string similar to MaxSizeInKilobytes cannot be changed. The current running instance does not have write access to the repository..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.MissingCategories">
             <summary>
               Looks up a localized string similar to There is no explicit mapping for the categories &apos;{0}&apos;. The log entry was: 
            {1}.
             </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.NotProcessedTraceSourceName">
            <summary>
              Looks up a localized string similar to Unprocessed Category.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ParameterMustImplementType">
            <summary>
              Looks up a localized string similar to Parameter must implement type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ProcessMessageFailed">
            <summary>
              Looks up a localized string similar to Processing of the message failed. See summary information below for more information. Should this problem persist, stop the service and check the configuration file(s) for possible error(s) in the configuration of the categories and sinks..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ProcessMessageFailed2">
            <summary>
              Looks up a localized string similar to ProcessQueueMessage - additional information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ProcessMessageFailed3">
             <summary>
               Looks up a localized string similar to 
            Message: 
            {0}.
             </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.PropertyAccessFailed">
            <summary>
              Looks up a localized string similar to Access failed.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ReflectedPropertyTokenException">
            <summary>
              Looks up a localized string similar to &lt;Error: property {0} threw an exception&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ReflectedPropertyTokenIndexer">
            <summary>
              Looks up a localized string similar to &lt;Error: property {0} is indexer&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ReflectedPropertyTokenNotFound">
            <summary>
              Looks up a localized string similar to &lt;Error: property {0} not found&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ReflectedPropertyTokenNotReadable">
            <summary>
              Looks up a localized string similar to &lt;Error: property {0} is not readable&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.RemoteServiceTraceListener_ReportProxyError_MessageFormat">
            <summary>
              Looks up a localized string similar to Tracing to LogSource &apos;{0}&apos; failed. Exception &apos;{1}&apos; (&quot;{2}&quot;) was thrown when trying to create the remote service&apos;s client proxy..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.RemoteServiceTraceListener_ReportTracingError_EntriesSummaryMessageFormat">
             <summary>
               Looks up a localized string similar to The following log entries failed to submit and will not be automatically resubmitted:
            {0}.
             </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.RemoteServiceTraceListener_ReportTracingError_GeneralExceptionMessageFormat">
            <summary>
              Looks up a localized string similar to Tracing to LogSource &apos;{0}&apos; failed. Exception &apos;{1}&apos; (&quot;{2}&quot;) was thrown when trying to submit log entries to the server..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.RemoteServiceTraceListener_ReportTracingError_LogEntryFormat">
            <summary>
              Looks up a localized string similar to {0}: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.RemoteServiceTraceListener_ReportTracingError_ShortenedLongLogEntryMessageFormat">
            <summary>
              Looks up a localized string similar to {0}....
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ResizeRepositoryFailed">
            <summary>
              Looks up a localized string similar to Resize failed. Could not grab a file lock on the isolated storage after it has been removed and prior to re-initialization. Data loss may have occurred..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.TraceListenersReferenceCollection_InvalidName">
            <summary>
              Looks up a localized string similar to TraceListener with name &apos;{0}&apos; is not defined in configuration or not active..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.Tracer_EndMessageFormat">
            <summary>
              Looks up a localized string similar to End Trace: Activity &apos;{0}&apos; in method &apos;{1}&apos; at {2} ticks (elapsed time: {3} seconds).
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.Tracer_StartMessageFormat">
            <summary>
              Looks up a localized string similar to Start Trace: Activity &apos;{0}&apos; in method &apos;{1}&apos; at {2} ticks.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.TraceSourceFailed">
            <summary>
              Looks up a localized string similar to Tracing to LogSource &apos;{0}&apos; failed. Processing for other sources will continue. See summary information below for more information. Should this problem persist, stop the service and check the configuration file(s) for possible error(s) in the configuration of the categories and sinks..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.TraceSourceFailed2">
            <summary>
              Looks up a localized string similar to ProcessQueueMessage - additional information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.TraceSourceFailed3">
             <summary>
               Looks up a localized string similar to 
            Message: 
            {0}.
             </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.UnknownFailure">
            <summary>
              Looks up a localized string similar to Unknown failure..
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListenerFilter">
            <summary>
            Used by <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>s to keep the knowledge of which <see cref="N:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners"/> have been 
            already traced through. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListenerFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListenerFilter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListenerFilter.GetAvailableTraceListeners(System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener})">
            <summary>
            Gets the available trace listeners from a list of all the trace listeners.
            </summary>
            <param name="traceListeners">The list of all the trace listeners.</param>
            <returns>A filtered list of trace listeners.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.BoundedStreamStorage">
            <summary>
            Implements bounded storage on a stream, overwriting older entries.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.BoundedStreamStorage.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.BoundedStreamStorage"/> class with a <see cref="T:System.IO.Stream"/>.
            </summary>
            <remarks>
            Requires the stream to be properly initialized for bounded storage.
            </remarks>
            <param name="stream">The stream to manage.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="stream"/> is not a properly initialized Stream.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.BoundedStreamStorage.Initialize(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Initializes a stream to be used for bounded storage with the specified parameters.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to initialize.</param>
            <param name="maxSizeInBytes">The max size in bytes as specified.</param>
            <param name="actualMaxSizeInBytes">The actual max size in bytes</param>
            <remarks>
            The stream is expected to have allow for the header to be written.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.BoundedStreamStorage.Add(System.Byte[])">
            <summary>
            Adds an entry to the storage.
            </summary>
            <remarks>
            Adding a new entry might result in older entries to be deleted.
            </remarks>
            <param name="entry">The entry to add.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="entry"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">when <paramref name="entry"/> is larger than the effective max size.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.BoundedStreamStorage.RetrieveEntries">
            <summary>
            Returns the entries currently serialized in the storage, in the order in which they were added.
            </summary>
            <returns>The entries.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.BoundedStreamStorage.Flush">
            <summary>
            Flushes buffered data in the stream.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.BoundedStreamStorage.Finalize">
            <summary>
            Dispose of the storage before garbage collection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.BoundedStreamStorage.Dispose">
            <summary>
            Dispose of the storage before garbage collection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.BoundedStreamStorage.Dispose(System.Boolean)">
            <summary>
            Dispose of the storage before garbage collection.
            </summary>
            <param name="disposing">
            <see langword="true"/> if disposing; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.BoundedStreamStorage.StreamHeaderSize">
            <summary>
            Gets the size of the stream header.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.BoundedStreamStorage.EntryHeaderSize">
            <summary>
            Gets the size of the entry header.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.BoundedStreamStorage.MaxSizeInBytes">
            <summary>
            Gets the max size of the bounded storage as originally requested.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.BoundedStreamStorage.ActualMaxSizeInBytes">
            <summary>
            Gets the actual max size of the bounded storage.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.BoundedStreamStorage.EffectiveMaxSizeInBytes">
            <summary>
            Gets the max size that is available for storage of entries.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.BoundedStreamStorage.Head">
            <summary>
            Gets the index of the head.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.BoundedStreamStorage.Tail">
            <summary>
            Gets the index of the tail.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.DefaultTraceDispatcher">
            <summary>
            A default implementation of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.ITraceDispatcher"/> receiving trace events 
            and dispatching them through its TraceReceived event handler.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.ITraceDispatcher">
            <summary>
            Represent a dispatcher for trace events.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.ITraceDispatcher.ReceiveTrace(Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventCache,System.String,Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType,System.Int32,System.Object,System.String)">
            <summary>
            Raise the TraceReceived event handler with the trace event information.
            </summary>
            <param name="traceEventCache">The context information provided by <see cref="N:System.Diagnostics"/>.</param>
            <param name="source">The name of the trace source that delivered the trace data.</param>
            <param name="eventType">The type of event.</param>
            <param name="id">The id of the event.</param>
            <param name="data">The data to trace.</param>
            <param name="tag">A tag containing additional information about the trace event.</param>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Logging.ITraceDispatcher.TraceReceived">
            <summary>
            The event raised when a trace event is received.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.DefaultTraceDispatcher.ReceiveTrace(Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventCache,System.String,Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType,System.Int32,System.Object,System.String)">
            <summary>
            Raise the TraceReceived event handler with the trace event information.
            </summary>
            <param name="traceEventCache">The context information provided by <see cref="N:System.Diagnostics"/>.</param>
            <param name="source">The name of the trace source that delivered the trace data.</param>
            <param name="eventType">The type of event.</param>
            <param name="id">The id of the event.</param>
            <param name="data">The data to trace.</param>
            <param name="tag">A tag containing additional information about the trace event.</param>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Logging.DefaultTraceDispatcher.TraceReceived">
            <summary>
            The event raised when a trace event is received.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.ILogEntryRepository">
            <summary>
            Stores log entries.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.ILogEntryRepository.Add(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Adds an entry to the repository.
            </summary>
            <param name="entry">The entry to add.</param>
            <remarks>
            Adding an entry can result in older entries to be discarded.
            </remarks>
            <exception cref="T:System.InvalidOperationException">when the repository is not available.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.ILogEntryRepository.RetrieveEntries">
            <summary>
            Returns a copy of the entries currently stored in the repository.
            </summary>
            <returns>The entries.</returns>
            <exception cref="T:System.InvalidOperationException">when the repository is not available.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.ILogEntryRepository.Flush">
            <summary>
            Flushes the underlying storage.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.ILogEntryRepository.Resize(System.Int32)">
            <summary>
            Resizes the backing size, trying to preserve all the entries.
            </summary>
            <param name="maxSizeInKilobytes">The maximum size in kilobytes.</param>
            <exception cref="T:System.InvalidOperationException">when the repository is not available.</exception>
            <exception cref="T:System.IO.IOException">when the repository cannot be re-initialized.</exception>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.ILogEntryRepository.IsAvailable">
            <summary>
            Gets a value indicating whether the repository is available.
            </summary>
            <remarks>
            When not available, all the operations will throw an <see cref="T:System.InvalidOperationException"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.ILogEntryRepository.ActualMaxSizeInKilobytes">
            <summary>
            Gets the maximum size in kilobytes as available when the storage was initialized.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Service.ILoggingService">
            <summary>
            Asynchronous logging service to submit log entries to a remote server.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.ILoggingService.BeginAdd(Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage[],System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously submits log entries to the server log.
            </summary>
            <param name="entries">The log entries to send to the server.</param>
            <param name="callback">The delegate to call when the operation finishes.</param>
            <param name="asyncState">The user-defined state object used to pass context data to the callback method.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the status of the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.ILoggingService.EndAdd(System.IAsyncResult)">
            <summary>
            Called to complete the <see cref="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.ILoggingService.BeginAdd(Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage[],System.AsyncCallback,System.Object)"/> operation.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that represents the status of the asynchronous operation.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageLogEntryRepository">
            <summary>
            Stores log entries in isolated storage, keeping the file size under a specified maximum.
            </summary>
            <remarks>
            Older entries will be discarded by new ones if the specified maximum size is reached.
            </remarks> 
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageLogEntryRepository.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageLogEntryRepository"/> with a name and a
            maximum size.
            </summary>
            <remarks>
            If the instance cannot be initialized (e.g. the storage file cannot be opened) then the instance will
            not be available and the operations will throw an <see cref="T:System.InvalidOperationException"/>.
            </remarks>
            <param name="storageName">The name of the storage file.</param>
            <param name="maxSizeInKilobytes">The maximum size in kilobytes.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageLogEntryRepository.InitializeRepositoryStream(System.String,System.Int32)">
            <summary>
            Initializes file in isolated storage to be used as a repository.
            </summary>
            <param name="repositoryFileName">The name of the repository file name.</param>
            <param name="maxSizeInKilobytes">The requested maximum size in kilobytes</param>
            <returns>The initialized stream.</returns>
            <remarks>
            Initialization will attempt to use the specified maximum size in kilobytes, but if not enough room is available
            it will use the maximum available size as a fallback.
            </remarks>
            <exception cref="T:System.ArgumentException">when the specified file already exists.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageLogEntryRepository.GetRepositoryFileName(System.String)">
            <summary>
            Computes the isolated storage file name for a repository name.
            </summary>
            <param name="repositoryName">The repository name.</param>
            <returns>The isolated storage file name.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageLogEntryRepository.Add(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Adds an entry to the repository.
            </summary>
            <param name="entry">The entry to add.</param>
            <remarks>
            Adding an entry can result in older entries to be discarded.
            </remarks>
            <exception cref="T:System.InvalidOperationException">when the repository is not available.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageLogEntryRepository.RetrieveEntries">
            <summary>
            Returns a copy of the entries currently stored in the repository.
            </summary>
            <returns>The entries.</returns>
            <exception cref="T:System.InvalidOperationException">when the repository is not available.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageLogEntryRepository.Flush">
            <summary>
            Flushes the underlying storage.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageLogEntryRepository.Finalize">
            <summary>
            Dispose of the repository before garbage collection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageLogEntryRepository.Dispose">
            <summary>
            Dispose of the repository before garbage collection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageLogEntryRepository.Dispose(System.Boolean)">
            <summary>
            Dispose of the repository before garbage collection.
            </summary>
            <param name="disposing">
            <see langword="true"/> if disposing; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageLogEntryRepository.Resize(System.Int32)">
            <summary>
            Resizes the isolated storage backing size, trying to preserve all the entries.
            </summary>
            <param name="maxSizeInKilobytes">The maximum size in kilobytes.</param>
            <remarks>
            If the instance cannot be re-initialized (e.g. the storage file cannot be opened) then the instance will
            not be available and the operations will throw an <see cref="T:System.IO.IOException"/>.
            If the new maximum size is smaller than the previous, the oldest entries can be potentially removed.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageLogEntryRepository.MaxSizeInKilobytes">
            <summary>
            Gets the maximum size in kilobytes as originally requested.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageLogEntryRepository.ActualMaxSizeInKilobytes">
            <summary>
            Gets the maximum size in kilobytes as available when the storage was initialized.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageLogEntryRepository.IsAvailable">
            <summary>
            Gets a value indicating whether the repository is available.
            </summary>
            <remarks>
            When not available, all the operations will throw an <see cref="T:System.InvalidOperationException"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageTraceListener">
            <summary>
            A trace listener that logs entries to a log entry repository in isolated storage.
            </summary>
            <remarks>
            Older entries will be automatically discarded by new ones if the specified maximum size is reached.
            </remarks> 
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageTraceListener.#ctor(Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.ILogEntryRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageTraceListener"/> class with a repository.
            </summary>
            <param name="repository">The repository to store log entries.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageTraceListener.TraceData(Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventCache,System.String,Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="traceEventCache"></param>
            <param name="name"></param>
            <param name="eventType"></param>
            <param name="id"></param>
            <param name="data"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageTraceListener.Write(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageTraceListener.WriteLine(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageTraceListener.Flush">
            <summary>
            Flushes the output buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageTraceListener.GetUpdateContext">
            <summary>
            Provides an update context to batch change requests to the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageTraceListener"/> configuration.
            </summary>
            <returns>Returns an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.IIsolatedStorageTraceListenerUpdateContext"/> instance that can be used to apply the configuration changes.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageTraceListener.Repository">
            <summary>
            The repository used to store log entries.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageTraceListener.IsolatedStorageTraceListenerUpdateContext">
            <summary>
            Provides an update context for changing the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageTraceListener"/> settings.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageTraceListener.IsolatedStorageTraceListenerUpdateContext.#ctor(Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageTraceListener)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageTraceListener.IsolatedStorageTraceListenerUpdateContext"/>.
            </summary>
            <param name="traceListener">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener"/> being configured.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageTraceListener.IsolatedStorageTraceListenerUpdateContext.ApplyChanges">
            <summary>
            Applies the changes.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageTraceListener.IsolatedStorageTraceListenerUpdateContext.IsRepositoryAvailable">
            <summary>
            Gets a value indicating if the underlying repository is available for the running instance.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IsolatedStorageTraceListener.IsolatedStorageTraceListenerUpdateContext.MaxSizeInKilobytes">
            <summary>
            Gets or sets the maximum size in kilobytes to be used in the isolated storage by the log entry repository.
            </summary>
            <remarks>When the repository is resized, it will try to allocate the specified space, but a smaller size than the 
            specified might be allocated if not as much space is available.</remarks>
            <returns>The maximum size in kilobytes as available when the storage was initialized.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage">
            <summary>
            Represents a log message contract.  Contains the common properties that are required for all log messages.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage.Message">
            <summary>
            Message body to log.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage.Categories">
            <summary>
            Category name used to route the log entry to a one or more trace listeners.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage.Priority">
            <summary>
            Importance of the log message.  Only messages whose priority is between the minimum and maximum priorities (inclusive)
            will be processed.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage.EventId">
            <summary>
            Event number or identifier.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage.Severity">
            <summary>
            Log entry severity as a <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage.Severity"/> enumeration. (Unspecified, Information, Warning or Error).
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage.Title">
            <summary>
            Additional description of the log entry message.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage.TimeStamp">
            <summary>
            Date and time of the log entry message. This timestamp must use the <see cref="F:System.Globalization.DateTimeStyles.RoundtripKind"/> format.
            </summary>
            <example>entry.TimeStamp = DateTime.UtcNow.ToString("o", CultureInfo.InvariantCulture);</example>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage.AppDomainName">
            <summary>
            The <see cref="T:System.AppDomain"/> in which the program is running
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage.ManagedThreadName">
            <summary>
            The name of the .NET thread.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage.ExtendedPropertiesKeys">
            <summary>
            Together with <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage.ExtendedPropertiesValues"/>, this property represent the keys for a Dictionary of extended properties.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage.ExtendedPropertiesValues">
            <summary>
            Together with <see cref="P:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage.ExtendedPropertiesKeys"/>, this property represent the values for a Dictionary of extended properties.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage.ActivityId">
            <summary>
            Tracing activity id
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage.RelatedActivityId">
            <summary>
            Related activity id
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage.MachineName">
            <summary>
            Name of the computer.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage.ProcessId">
            <summary>
            The Win32 process ID for the current running process.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage.ProcessName">
            <summary>
            The name of the current running process.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage.Win32ThreadId">
            <summary>
            The Win32 Thread ID for the current thread.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LoggingServiceProxy">
            <summary>
            Proxy to the WCF logging service.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LoggingServiceProxy.#ctor(System.ServiceModel.ChannelFactory{Microsoft.Practices.EnterpriseLibrary.Logging.Service.ILoggingService})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LoggingServiceProxy"/> class.
            </summary>
            <param name="factory">The channel factory for the logging service.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LoggingServiceProxy.BeginAdd(Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage[],System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously submits log entries to the server log.
            </summary>
            <param name="entries">The log entries to send to the server.</param>
            <param name="callback">The delegate to call when the operation finishes.</param>
            <param name="asyncState">The user-defined state object used to pass context data to the callback method.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the status of the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LoggingServiceProxy.EndAdd(System.IAsyncResult)">
            <summary>
            Called to complete the <see cref="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LoggingServiceProxy.BeginAdd(Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage[],System.AsyncCallback,System.Object)"/> operation.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that represents the status of the asynchronous operation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LoggingServiceProxy.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LoggingServiceProxy.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"><see langword="true"/> if the method is being called from the <see cref="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LoggingServiceProxy.Dispose"/> method. <see langword="false"/> if it is being called from within the object finalizer.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LoggingServiceProxy.Finalize">
            <summary>
            Releases resources for a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LoggingServiceProxy"/> before garbage collection.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener">
            <summary>
            Trace listener that sends the log entries to a remote server.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener.#ctor(System.Boolean,Microsoft.Practices.EnterpriseLibrary.Logging.Service.ILoggingServiceFactory,Microsoft.Practices.EnterpriseLibrary.Common.Utility.IRecurringWorkScheduler,Microsoft.Practices.EnterpriseLibrary.Logging.Service.ILogEntryMessageStore,Microsoft.Practices.EnterpriseLibrary.Logging.IAsyncTracingErrorReporter,Microsoft.Practices.EnterpriseLibrary.Logging.Service.INetworkStatus)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener"/>.
            </summary>
            <param name="sendImmediately">Value indicating if the log entries should be sent shortly after they have been logged, or else 
              wait until the <paramref name="timer"/> interval has elapsed.</param>
            <param name="loggingServiceFactory">The factory to create new channel instances to submit the entries to the server.</param>
            <param name="timer">A scheduler to retry sending the log entries when there are connectivity issues.</param>
            <param name="store">The store used for buffering entries.</param>
            <param name="asyncTracingErrorReporter"></param>
            <param name="networkStatus">Provides notifications for when there is a network connection to try to send the entries.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener.TraceData(Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventCache,System.String,Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Writes trace information, a data object and event information to the listener specific output.
            </summary>
            <param name="traceEventCache">A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventCache"/> object that contains context information.</param>
            <param name="source">A name used to identify the output.</param>
            <param name="eventType">One of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener.GetEntriesToSend">
            <summary>
            Gets the log entries to send to the server.
            </summary>
            <returns>The entries to send.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener.Translate(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Translates a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> instance into a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Service.LogEntryMessage"/> instance.
            </summary>
            <param name="entry">The source object to translate.</param>
            <returns>The translated log entry.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener.Write(System.String)">
            <summary>
            This method is not supported.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener.WriteLine(System.String)">
            <summary>
            This method is not supported.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"><see langword="true"/> if the method is being called from the <see cref="M:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener.Dispose"/> method. <see langword="false"/> if it is being called from within the object finalizer.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener.GetUpdateContext">
            <summary>
            Provides an update context to batch change requests to the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener"/> configuration.
            </summary>
            <returns>Returns an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.ITraceListenerUpdateContext"/> instance that can be used to apply the configuration changes.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener.SendImmediately">
            <summary>
            Gets or sets a value indicating if the log entries should be sent shortly after they have been logged, or else 
            wait until the submit interval value has elapsed.
            </summary>
            <remarks>
            Set this value to <see langword="false"/> in order to buffer as many entries as possible during the submit interval time,
            and have potentially fewer and larger requests to the server.
            Set this value to <see langword="true"/> if you prefer to try to submit the entries as soon as possible, potentially sending only one or few log 
            entries per server call.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener.IsThreadSafe">
            <summary>
            Gets a value indicating whether this instance is thread safe.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener.Store">
            <summary>
            The store used for buffering entries.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener.RemoteServiceTraceListenerUpdateContext">
            <summary>
            Provides an update context for changing the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener"/> settings.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener.RemoteServiceTraceListenerUpdateContext.#ctor(Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener.RemoteServiceTraceListenerUpdateContext"/>.
            </summary>
            <param name="traceListener">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceListener"/> being configured.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener.RemoteServiceTraceListenerUpdateContext.ApplyChanges">
            <summary>
            Applies the changes.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener.RemoteServiceTraceListenerUpdateContext.SendImmediately">
            <summary>
            Gets or sets a value indicating if the log entries should be sent shortly after they have been logged, or else 
            wait until the submit interval value has elapsed.
            </summary>
            <remarks>
            Set this value to <see langword="false"/> in order to buffer as many entries as possible during the submit interval time,
            and have potentially fewer and larger requests to the server.
            Set this value to <see langword="true"/> if you prefer to try to submit the entries as soon as possible, potentially sending only one or few log 
            entries per server call.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RemoteServiceTraceListener.RemoteServiceTraceListenerUpdateContext.IsolatedStorageBufferMaxSizeInKilobytes">
            <summary>
            Gets or sets the maximum size in kilobytes to be used when storing entries into the isolated storage as a backup strategy.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceReceivedEventArgs">
            <summary>
            Event argument passed when trace event is received.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceReceivedEventArgs.#ctor(Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventCache,System.String,Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType,System.Int32,System.Object,System.String)">
            <summary>
            Construct a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceReceivedEventArgs"/> with details of the trace event.
            </summary>
            <param name="traceEventCache">The context information provided by <see cref="N:System.Diagnostics"/>.</param>
            <param name="source">The name of the trace source that delivered the trace data.</param>
            <param name="eventType">The type of event.</param>
            <param name="id">The id of the event.</param>
            <param name="data">The data to trace.</param>
            <param name="tag">A tag containing additional information about the trace event.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceReceivedEventArgs.TraceEventCache">
            <summary>
            The context information provided by <see cref="N:System.Diagnostics"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceReceivedEventArgs.Source">
            <summary>
            The name of the trace source that delivered the trace data.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceReceivedEventArgs.EventType">
            <summary>
            The type of event.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceReceivedEventArgs.Id">
            <summary>
            The id of the event.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceReceivedEventArgs.Data">
            <summary>
            The data to trace.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceReceivedEventArgs.Tag">
            <summary>
            A tag containing additional information about the trace event.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.LogEntrySerializer">
            <summary>
            Serializes and deserializes log entries into byte arrays.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.LogEntrySerializer.Serialize(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Serializes a log entry into an array of bytes.
            </summary>
            <param name="entry">The entry to serialize.</param>
            <returns>A array of bytes representing the <paramref name="entry"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.LogEntrySerializer.Deserialize(System.Byte[])">
            <summary>
            Deserializes an array of bytes into a log entry.
            </summary>
            <param name="logEntryBytes">The array of bytes.</param>
            <returns>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> represented by <paramref name="logEntryBytes"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.NotificationTraceListener">
            <summary>
            Trace listener that raises an event while tracing.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.NotificationTraceListener.#ctor(Microsoft.Practices.EnterpriseLibrary.Logging.ITraceDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.NotificationTraceListener"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.NotificationTraceListener.TraceData(Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventCache,System.String,Microsoft.Practices.EnterpriseLibrary.Logging.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Send the tracing information to the provided ITraceDispatcher with the trace event.
            </summary>
            <param name="traceEventCache">The context information provided by <see cref="N:System.Diagnostics"/>.</param>
            <param name="source">The name of the trace source that delivered the trace data.</param>
            <param name="eventType">The type of event.</param>
            <param name="id">The id of the event.</param>
            <param name="data">The data to trace.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.NotificationTraceListener.Write(System.String)">
            <summary>
            Writes the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.NotificationTraceListener.WriteLine(System.String)">
            <summary>
            Writes the specified message, followed by a line terminator.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.NotificationTraceListener.IsThreadSafe">
            <summary>
            Gets a value indicating whether this instance is thread safe.
            </summary>
        </member>
    </members>
</doc>
